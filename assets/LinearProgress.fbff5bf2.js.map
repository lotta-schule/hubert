{"version":3,"file":"LinearProgress.fbff5bf2.js","sources":["../../node_modules/@react-aria/label/dist/module.js","../../node_modules/@react-aria/progress/dist/module.js","../../src/progress/CircularProgress.tsx","../../src/progress/LinearProgress.tsx"],"sourcesContent":["import {useSlotId as $iD7q0$useSlotId, mergeProps as $iD7q0$mergeProps, useId as $iD7q0$useId, useLabels as $iD7q0$useLabels} from \"@react-aria/utils\";\n\n\nfunction $d191a55c9702f145$export$8467354a121f1b9f(props) {\n    let { id: id , label: label , 'aria-labelledby': ariaLabelledby , 'aria-label': ariaLabel , labelElementType: labelElementType = 'label'  } = props;\n    id = $iD7q0$useId(id);\n    let labelId = $iD7q0$useId();\n    let labelProps = {\n    };\n    if (label) {\n        ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;\n        labelProps = {\n            id: labelId,\n            htmlFor: labelElementType === 'label' ? id : undefined\n        };\n    } else if (!ariaLabelledby && !ariaLabel) console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');\n    let fieldProps = $iD7q0$useLabels({\n        id: id,\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledby\n    });\n    return {\n        labelProps: labelProps,\n        fieldProps: fieldProps\n    };\n}\n\n\n\nfunction $2baaea4c71418dea$export$294aa081a6c6f55d(props) {\n    let { description: description , errorMessage: errorMessage , validationState: validationState  } = props;\n    let { labelProps: labelProps , fieldProps: fieldProps  } = $d191a55c9702f145$export$8467354a121f1b9f(props);\n    let descriptionId = $iD7q0$useSlotId([\n        Boolean(description),\n        Boolean(errorMessage),\n        validationState\n    ]);\n    let errorMessageId = $iD7q0$useSlotId([\n        Boolean(description),\n        Boolean(errorMessage),\n        validationState\n    ]);\n    fieldProps = $iD7q0$mergeProps(fieldProps, {\n        'aria-describedby': [\n            descriptionId,\n            // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268\n            errorMessageId,\n            props['aria-describedby']\n        ].filter(Boolean).join(' ') || undefined\n    });\n    return {\n        labelProps: labelProps,\n        fieldProps: fieldProps,\n        descriptionProps: {\n            id: descriptionId\n        },\n        errorMessageProps: {\n            id: errorMessageId\n        }\n    };\n}\n\n\n\n\n\nexport {$2baaea4c71418dea$export$294aa081a6c6f55d as useField, $d191a55c9702f145$export$8467354a121f1b9f as useLabel};\n//# sourceMappingURL=module.js.map\n","import {filterDOMProps as $e3Dei$filterDOMProps, clamp as $e3Dei$clamp, mergeProps as $e3Dei$mergeProps} from \"@react-aria/utils\";\nimport {useLabel as $e3Dei$useLabel} from \"@react-aria/label\";\nimport {useNumberFormatter as $e3Dei$useNumberFormatter} from \"@react-aria/i18n\";\n\n\n\n\nfunction $204d9ebcedfb8806$export$ed5abd763a836edc(props) {\n    let { value: value = 0 , minValue: minValue = 0 , maxValue: maxValue = 100 , valueLabel: valueLabel , isIndeterminate: isIndeterminate , formatOptions: formatOptions = {\n        style: 'percent'\n    }  } = props;\n    let domProps = $e3Dei$filterDOMProps(props, {\n        labelable: true\n    });\n    let { labelProps: labelProps , fieldProps: fieldProps  } = $e3Dei$useLabel({\n        ...props,\n        // Progress bar is not an HTML input element so it\n        // shouldn't be labeled by a <label> element.\n        labelElementType: 'span'\n    });\n    value = $e3Dei$clamp(value, minValue, maxValue);\n    let percentage = (value - minValue) / (maxValue - minValue);\n    let formatter = $e3Dei$useNumberFormatter(formatOptions);\n    if (!isIndeterminate && !valueLabel) {\n        let valueToFormat = formatOptions.style === 'percent' ? percentage : value;\n        valueLabel = formatter.format(valueToFormat);\n    }\n    return {\n        progressBarProps: $e3Dei$mergeProps(domProps, {\n            ...fieldProps,\n            'aria-valuenow': isIndeterminate ? undefined : value,\n            'aria-valuemin': minValue,\n            'aria-valuemax': maxValue,\n            'aria-valuetext': isIndeterminate ? undefined : valueLabel,\n            role: 'progressbar'\n        }),\n        labelProps: labelProps\n    };\n}\n\n\n\n\nexport {$204d9ebcedfb8806$export$ed5abd763a836edc as useProgressBar};\n//# sourceMappingURL=module.js.map\n","import * as React from 'react';\nimport { AriaProgressBarProps } from '@react-types/progress';\nimport { useProgressBar } from '@react-aria/progress';\nimport clsx from 'clsx';\n\nimport styles from './CircularProgress.module.scss';\n\nexport interface CircularProgressProps extends AriaProgressBarProps {\n  value?: number;\n  size?: React.CSSProperties['width'];\n  showValue?: boolean;\n  isIndeterminate?: boolean;\n  style?: React.CSSProperties;\n  className?: React.HTMLProps<HTMLProgressElement>['className'];\n}\n\nexport const CircularProgress = React.memo<CircularProgressProps>(\n  ({ className, showValue, size = '5em', ...props }) => {\n    const { value, isIndeterminate } = props;\n    const { progressBarProps } = useProgressBar(props);\n    const style: React.CSSProperties = {\n      ...(value !== undefined && { '--value': value / 100 }),\n      width: size,\n      height: size,\n      ...props.style,\n    };\n\n    return (\n      <div\n        className={clsx(className, styles.root, {\n          [styles.indeterminate]: isIndeterminate,\n        })}\n        style={style}\n        {...progressBarProps}\n      >\n        <svg viewBox=\"0 0 100 100\">\n          <circle cx=\"50\" cy=\"50\" r=\"46\" pathLength={288.5} />\n          {!isIndeterminate && showValue && (\n            <text x=\"50\" y=\"59\" fontSize=\"30\" textLength=\"60\">\n              {Math.floor(value ?? 0)}%\n            </text>\n          )}\n        </svg>\n      </div>\n    );\n  }\n);\nCircularProgress.displayName = 'CircularProgress';\n","import * as React from 'react';\nimport { AriaProgressBarProps } from '@react-types/progress';\nimport { useProgressBar } from '@react-aria/progress';\nimport clsx from 'clsx';\n\nimport styles from './LinearProgress.module.scss';\n\nexport interface LinearProgressProps extends AriaProgressBarProps {\n  value?: number;\n  isIndeterminate?: boolean;\n  className?: React.HTMLProps<HTMLProgressElement>['className'];\n}\n\nexport const LinearProgress = React.memo<LinearProgressProps>(\n  ({ className, ...props }) => {\n    const { value, isIndeterminate } = props;\n    const { progressBarProps } = useProgressBar(props);\n    const indicatorStyle: React.CSSProperties = {\n      ...(value !== undefined && { width: `${Math.floor(value)}%` }),\n    };\n    return (\n      <div\n        className={clsx(className, styles.root, {\n          [styles.indeterminate]: isIndeterminate,\n        })}\n      >\n        <div {...progressBarProps} className={styles.progressBar}>\n          <div className={styles.indicator} style={indicatorStyle}></div>\n        </div>\n      </div>\n    );\n  }\n);\nLinearProgress.displayName = 'LinearProgress';\n"],"names":["$iD7q0$useId","$iD7q0$useLabels","$iD7q0$useSlotId","$iD7q0$mergeProps","$e3Dei$filterDOMProps","$e3Dei$useLabel","$e3Dei$clamp","$e3Dei$useNumberFormatter","$e3Dei$mergeProps","React.memo","className","showValue","props","value","isIndeterminate","progressBarProps","size","style","_jsx","styles","_jsxs","CircularProgress","progressBar","indicator","indicatorStyle","LinearProgress"],"mappings":"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"}