{"version":3,"file":"module.7d41bc01.js","sources":["../../node_modules/@react-aria/interactions/dist/module.js"],"sourcesContent":["import {mergeProps as $bx7SL$mergeProps, useSyncRef as $bx7SL$useSyncRef, useGlobalListeners as $bx7SL$useGlobalListeners, focusWithoutScrolling as $bx7SL$focusWithoutScrolling, isIOS as $bx7SL$isIOS, runAfterTransition as $bx7SL$runAfterTransition, useLayoutEffect as $bx7SL$useLayoutEffect, isMac as $bx7SL$isMac, useEvent as $bx7SL$useEvent, useDescription as $bx7SL$useDescription} from \"@react-aria/utils\";\nimport $bx7SL$react, {useRef as $bx7SL$useRef, useContext as $bx7SL$useContext, useState as $bx7SL$useState, useMemo as $bx7SL$useMemo, useEffect as $bx7SL$useEffect, useCallback as $bx7SL$useCallback} from \"react\";\n\n\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet $14c0b72509d70225$var$state = 'default';\nlet $14c0b72509d70225$var$savedUserSelect = '';\nlet $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n    if ($bx7SL$isIOS()) {\n        if ($14c0b72509d70225$var$state === 'default') {\n            $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n            document.documentElement.style.webkitUserSelect = 'none';\n        }\n        $14c0b72509d70225$var$state = 'disabled';\n    } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n        // If not iOS, store the target's original user-select and change to user-select: none\n        // Ignore state since it doesn't apply for non iOS\n        $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);\n        target.style.userSelect = 'none';\n    }\n}\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n    if ($bx7SL$isIOS()) {\n        // If the state is already default, there's nothing to do.\n        // If it is restoring, then there's no need to queue a second restore.\n        if ($14c0b72509d70225$var$state !== 'disabled') return;\n        $14c0b72509d70225$var$state = 'restoring';\n        // There appears to be a delay on iOS where selection still might occur\n        // after pointer up, so wait a bit before removing user-select.\n        setTimeout(()=>{\n            // Wait for any CSS transitions to complete so we don't recompute style\n            // for the whole page in the middle of the animation and cause jank.\n            $bx7SL$runAfterTransition(()=>{\n                // Avoid race conditions\n                if ($14c0b72509d70225$var$state === 'restoring') {\n                    if (document.documentElement.style.webkitUserSelect === 'none') document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || '';\n                    $14c0b72509d70225$var$savedUserSelect = '';\n                    $14c0b72509d70225$var$state = 'default';\n                }\n            });\n        }, 300);\n    } else if (target instanceof HTMLElement || target instanceof SVGElement) // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    {\n        if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n            let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n            if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;\n            if (target.getAttribute('style') === '') target.removeAttribute('style');\n            $14c0b72509d70225$var$modifiedElementMap.delete(target);\n        }\n    }\n}\n\n\n\n\n\nfunction $8a9cb279dc87e130$export$60278871457622de(event) {\n    // JAWS/NVDA with Firefox.\n    if (event.mozInputSource === 0 && event.isTrusted) return true;\n    return event.detail === 0 && !event.pointerType;\n}\nclass $8a9cb279dc87e130$export$905e7fc544a71f36 {\n    isDefaultPrevented() {\n        return this.nativeEvent.defaultPrevented;\n    }\n    preventDefault() {\n        this.defaultPrevented = true;\n        this.nativeEvent.preventDefault();\n    }\n    stopPropagation() {\n        this.nativeEvent.stopPropagation();\n        this.isPropagationStopped = ()=>true\n        ;\n    }\n    isPropagationStopped() {\n        return false;\n    }\n    persist() {\n    }\n    constructor(type, nativeEvent){\n        this.nativeEvent = nativeEvent;\n        this.target = nativeEvent.target;\n        this.currentTarget = nativeEvent.currentTarget;\n        this.relatedTarget = nativeEvent.relatedTarget;\n        this.bubbles = nativeEvent.bubbles;\n        this.cancelable = nativeEvent.cancelable;\n        this.defaultPrevented = nativeEvent.defaultPrevented;\n        this.eventPhase = nativeEvent.eventPhase;\n        this.isTrusted = nativeEvent.isTrusted;\n        this.timeStamp = nativeEvent.timeStamp;\n        this.type = type;\n    }\n}\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n    let stateRef = $bx7SL$useRef({\n        isFocused: false,\n        onBlur: onBlur,\n        observer: null\n    });\n    stateRef.current.onBlur = onBlur;\n    // Clean up MutationObserver on unmount. See below.\n    // eslint-disable-next-line arrow-body-style\n    $bx7SL$useLayoutEffect(()=>{\n        const state = stateRef.current;\n        return ()=>{\n            if (state.observer) {\n                state.observer.disconnect();\n                state.observer = null;\n            }\n        };\n    }, []);\n    // This function is called during a React onFocus event.\n    return $bx7SL$useCallback((e1)=>{\n        // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n        // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n        // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n        // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n        if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {\n            stateRef.current.isFocused = true;\n            let target = e1.target;\n            let onBlurHandler = (e)=>{\n                var // For backward compatibility, dispatch a (fake) React synthetic event.\n                _current, ref;\n                stateRef.current.isFocused = false;\n                if (target.disabled) (ref = (_current = stateRef.current).onBlur) === null || ref === void 0 ? void 0 : ref.call(_current, new $8a9cb279dc87e130$export$905e7fc544a71f36('blur', e));\n                // We no longer need the MutationObserver once the target is blurred.\n                if (stateRef.current.observer) {\n                    stateRef.current.observer.disconnect();\n                    stateRef.current.observer = null;\n                }\n            };\n            target.addEventListener('focusout', onBlurHandler, {\n                once: true\n            });\n            stateRef.current.observer = new MutationObserver(()=>{\n                if (stateRef.current.isFocused && target.disabled) {\n                    stateRef.current.observer.disconnect();\n                    target.dispatchEvent(new FocusEvent('blur'));\n                    target.dispatchEvent(new FocusEvent('focusout', {\n                        bubbles: true\n                    }));\n                }\n            });\n            stateRef.current.observer.observe(target, {\n                attributes: true,\n                attributeFilter: [\n                    'disabled'\n                ]\n            });\n        }\n    }, []);\n}\n\n\n\nconst $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = $bx7SL$react.createContext(null);\n$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = 'PressResponderContext';\n\n\n\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n    // Consume context from <PressResponder> and merge with props.\n    let context = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n    if (context) {\n        let { register: register , ...contextProps } = context;\n        props = $bx7SL$mergeProps(contextProps, props);\n        register();\n    }\n    $bx7SL$useSyncRef(context, props.ref);\n    return props;\n}\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n    let { onPress: onPress1 , onPressChange: onPressChange1 , onPressStart: onPressStart1 , onPressEnd: onPressEnd1 , onPressUp: onPressUp1 , isDisabled: isDisabled1 , isPressed: isPressedProp , preventFocusOnPress: preventFocusOnPress , shouldCancelOnPointerExit: shouldCancelOnPointerExit , allowTextSelectionOnPress: allowTextSelectionOnPress , // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _ , ...domProps } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n    let propsRef = $bx7SL$useRef(null);\n    propsRef.current = {\n        onPress: onPress1,\n        onPressChange: onPressChange1,\n        onPressStart: onPressStart1,\n        onPressEnd: onPressEnd1,\n        onPressUp: onPressUp1,\n        isDisabled: isDisabled1,\n        shouldCancelOnPointerExit: shouldCancelOnPointerExit\n    };\n    let [isPressed, setPressed] = $bx7SL$useState(false);\n    let ref = $bx7SL$useRef({\n        isPressed: false,\n        ignoreEmulatedMouseEvents: false,\n        ignoreClickAfterPress: false,\n        didFirePressStart: false,\n        activePointerId: null,\n        target: null,\n        isOverTarget: false,\n        pointerType: null\n    });\n    let { addGlobalListener: addGlobalListener , removeAllGlobalListeners: removeAllGlobalListeners  } = $bx7SL$useGlobalListeners();\n    let pressProps1 = $bx7SL$useMemo(()=>{\n        let state = ref.current;\n        let triggerPressStart = (originalEvent, pointerType)=>{\n            let { onPressStart: onPressStart , onPressChange: onPressChange , isDisabled: isDisabled  } = propsRef.current;\n            if (isDisabled || state.didFirePressStart) return;\n            if (onPressStart) onPressStart({\n                type: 'pressstart',\n                pointerType: pointerType,\n                target: originalEvent.currentTarget,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n            if (onPressChange) onPressChange(true);\n            state.didFirePressStart = true;\n            setPressed(true);\n        };\n        let triggerPressEnd = (originalEvent, pointerType, wasPressed = true)=>{\n            let { onPressEnd: onPressEnd , onPressChange: onPressChange , onPress: onPress , isDisabled: isDisabled  } = propsRef.current;\n            if (!state.didFirePressStart) return;\n            state.ignoreClickAfterPress = true;\n            state.didFirePressStart = false;\n            if (onPressEnd) onPressEnd({\n                type: 'pressend',\n                pointerType: pointerType,\n                target: originalEvent.currentTarget,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n            if (onPressChange) onPressChange(false);\n            setPressed(false);\n            if (onPress && wasPressed && !isDisabled) onPress({\n                type: 'press',\n                pointerType: pointerType,\n                target: originalEvent.currentTarget,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n        };\n        let triggerPressUp = (originalEvent, pointerType)=>{\n            let { onPressUp: onPressUp , isDisabled: isDisabled  } = propsRef.current;\n            if (isDisabled) return;\n            if (onPressUp) onPressUp({\n                type: 'pressup',\n                pointerType: pointerType,\n                target: originalEvent.currentTarget,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n        };\n        let cancel = (e)=>{\n            if (state.isPressed) {\n                if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                state.isPressed = false;\n                state.isOverTarget = false;\n                state.activePointerId = null;\n                state.pointerType = null;\n                removeAllGlobalListeners();\n                if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n            }\n        };\n        let pressProps = {\n            onKeyDown (e) {\n                if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target)) {\n                    if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();\n                    e.stopPropagation();\n                    // If the event is repeating, it may have started on a different element\n                    // after which focus moved to the current element. Ignore these events and\n                    // only handle the first key down event.\n                    if (!state.isPressed && !e.repeat) {\n                        state.target = e.currentTarget;\n                        state.isPressed = true;\n                        triggerPressStart(e, 'keyboard');\n                        // Focus may move before the key up event, so register the event on the document\n                        // instead of the same element where the key down event occurred.\n                        addGlobalListener(document, 'keyup', onKeyUp, false);\n                    }\n                }\n            },\n            onKeyUp (e) {\n                if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');\n            },\n            onClick (e) {\n                if (e && !e.currentTarget.contains(e.target)) return;\n                if (e && e.button === 0) {\n                    e.stopPropagation();\n                    if (isDisabled1) e.preventDefault();\n                    // If triggered from a screen reader or by using element.click(),\n                    // trigger as if it were a keyboard click.\n                    if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || $8a9cb279dc87e130$export$60278871457622de(e.nativeEvent))) {\n                        // Ensure the element receives focus (VoiceOver on iOS does not do this)\n                        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n                        triggerPressStart(e, 'virtual');\n                        triggerPressUp(e, 'virtual');\n                        triggerPressEnd(e, 'virtual');\n                    }\n                    state.ignoreEmulatedMouseEvents = false;\n                    state.ignoreClickAfterPress = false;\n                }\n            }\n        };\n        let onKeyUp = (e)=>{\n            if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e)) {\n                if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();\n                e.stopPropagation();\n                state.isPressed = false;\n                let target = e.target;\n                triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));\n                removeAllGlobalListeners();\n                // If the target is a link, trigger the click method to open the URL,\n                // but defer triggering pressEnd until onClick event handler.\n                if (state.target instanceof HTMLElement && (state.target.contains(target) && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link')) state.target.click();\n            }\n        };\n        if (typeof PointerEvent !== 'undefined') {\n            pressProps.onPointerDown = (e)=>{\n                // Only handle left clicks, and ignore events that bubbled through portals.\n                if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n                // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n                // Ignore and let the onClick handler take care of it instead.\n                // https://bugs.webkit.org/show_bug.cgi?id=222627\n                // https://bugs.webkit.org/show_bug.cgi?id=223202\n                if ($f6c31cce2adf654f$var$isVirtualPointerEvent(e.nativeEvent)) {\n                    state.pointerType = 'virtual';\n                    return;\n                }\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent\n                // default on pointer down and handle focusing the pressable element ourselves.\n                if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                state.pointerType = e.pointerType;\n                e.stopPropagation();\n                if (!state.isPressed) {\n                    state.isPressed = true;\n                    state.isOverTarget = true;\n                    state.activePointerId = e.pointerId;\n                    state.target = e.currentTarget;\n                    if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n                    if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n                    triggerPressStart(e, state.pointerType);\n                    addGlobalListener(document, 'pointermove', onPointerMove, false);\n                    addGlobalListener(document, 'pointerup', onPointerUp, false);\n                    addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n                }\n            };\n            pressProps.onMouseDown = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                if (e.button === 0) {\n                    // Chrome and Firefox on touch Windows devices require mouse down events\n                    // to be canceled in addition to pointer events, or an extra asynchronous\n                    // focus event will be fired.\n                    if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                    e.stopPropagation();\n                }\n            };\n            pressProps.onPointerUp = (e)=>{\n                // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n                if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return;\n                // Only handle left clicks\n                // Safari on iOS sometimes fires pointerup events, even\n                // when the touch isn't over the target, so double check.\n                if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n            };\n            // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n            // Use pointer move events instead to implement our own hit testing.\n            // See https://bugs.webkit.org/show_bug.cgi?id=199803\n            let onPointerMove = (e)=>{\n                if (e.pointerId !== state.activePointerId) return;\n                if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n                    if (!state.isOverTarget) {\n                        state.isOverTarget = true;\n                        triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                    }\n                } else if (state.isOverTarget) {\n                    state.isOverTarget = false;\n                    triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                    if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n                }\n            };\n            let onPointerUp = (e)=>{\n                if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n                    if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                    else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                    state.isPressed = false;\n                    state.isOverTarget = false;\n                    state.activePointerId = null;\n                    state.pointerType = null;\n                    removeAllGlobalListeners();\n                    if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n                }\n            };\n            let onPointerCancel = (e)=>{\n                cancel(e);\n            };\n            pressProps.onDragStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n                cancel(e);\n            };\n        } else {\n            pressProps.onMouseDown = (e)=>{\n                // Only handle left clicks\n                if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent\n                // default on mouse down and handle focusing the pressable element ourselves.\n                if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                e.stopPropagation();\n                if (state.ignoreEmulatedMouseEvents) return;\n                state.isPressed = true;\n                state.isOverTarget = true;\n                state.target = e.currentTarget;\n                state.pointerType = $8a9cb279dc87e130$export$60278871457622de(e.nativeEvent) ? 'virtual' : 'mouse';\n                if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n                triggerPressStart(e, state.pointerType);\n                addGlobalListener(document, 'mouseup', onMouseUp, false);\n            };\n            pressProps.onMouseEnter = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n                    state.isOverTarget = true;\n                    triggerPressStart(e, state.pointerType);\n                }\n            };\n            pressProps.onMouseLeave = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n                    state.isOverTarget = false;\n                    triggerPressEnd(e, state.pointerType, false);\n                    if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n                }\n            };\n            pressProps.onMouseUp = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);\n            };\n            let onMouseUp = (e)=>{\n                // Only handle left clicks\n                if (e.button !== 0) return;\n                state.isPressed = false;\n                removeAllGlobalListeners();\n                if (state.ignoreEmulatedMouseEvents) {\n                    state.ignoreEmulatedMouseEvents = false;\n                    return;\n                }\n                if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                state.isOverTarget = false;\n            };\n            pressProps.onTouchStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n                if (!touch) return;\n                state.activePointerId = touch.identifier;\n                state.ignoreEmulatedMouseEvents = true;\n                state.isOverTarget = true;\n                state.isPressed = true;\n                state.target = e.currentTarget;\n                state.pointerType = 'touch';\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n                // on the emulated mouse event and handle focusing the pressable element ourselves.\n                if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n                if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n                triggerPressStart(e, state.pointerType);\n                addGlobalListener(window, 'scroll', onScroll, true);\n            };\n            pressProps.onTouchMove = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (!state.isPressed) return;\n                let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n                if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n                    if (!state.isOverTarget) {\n                        state.isOverTarget = true;\n                        triggerPressStart(e, state.pointerType);\n                    }\n                } else if (state.isOverTarget) {\n                    state.isOverTarget = false;\n                    triggerPressEnd(e, state.pointerType, false);\n                    if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n                }\n            };\n            pressProps.onTouchEnd = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (!state.isPressed) return;\n                let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n                if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n                    triggerPressUp(e, state.pointerType);\n                    triggerPressEnd(e, state.pointerType);\n                } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);\n                state.isPressed = false;\n                state.activePointerId = null;\n                state.isOverTarget = false;\n                state.ignoreEmulatedMouseEvents = true;\n                if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n                removeAllGlobalListeners();\n            };\n            pressProps.onTouchCancel = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (state.isPressed) cancel(e);\n            };\n            let onScroll = (e)=>{\n                if (state.isPressed && e.target.contains(state.target)) cancel({\n                    currentTarget: state.target,\n                    shiftKey: false,\n                    ctrlKey: false,\n                    metaKey: false,\n                    altKey: false\n                });\n            };\n            pressProps.onDragStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                cancel(e);\n            };\n        }\n        return pressProps;\n    }, [\n        addGlobalListener,\n        isDisabled1,\n        preventFocusOnPress,\n        removeAllGlobalListeners,\n        allowTextSelectionOnPress\n    ]);\n    // Remove user-select: none in case component unmounts immediately after pressStart\n    // eslint-disable-next-line arrow-body-style\n    $bx7SL$useEffect(()=>{\n        return ()=>{\n            if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);\n        };\n    }, [\n        allowTextSelectionOnPress\n    ]);\n    return {\n        isPressed: isPressedProp || isPressed,\n        pressProps: $bx7SL$mergeProps(domProps, pressProps1)\n    };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n    return target.tagName === 'A' && target.hasAttribute('href');\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event) {\n    const { key: key , code: code , target: target  } = event;\n    const element = target;\n    const { tagName: tagName , isContentEditable: isContentEditable  } = element;\n    const role = element.getAttribute('role');\n    // Accessibility for keyboards. Space and Enter only.\n    // \"Spacebar\" is for IE 11\n    return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && tagName !== 'INPUT' && tagName !== 'TEXTAREA' && isContentEditable !== true && (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') && // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter');\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n    const { targetTouches: targetTouches  } = event;\n    if (targetTouches.length > 0) return targetTouches[0];\n    return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n    const changedTouches = event.changedTouches;\n    for(let i = 0; i < changedTouches.length; i++){\n        const touch = changedTouches[i];\n        if (touch.identifier === pointerId) return touch;\n    }\n    return null;\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n    return {\n        currentTarget: target,\n        shiftKey: e.shiftKey,\n        ctrlKey: e.ctrlKey,\n        metaKey: e.metaKey,\n        altKey: e.altKey\n    };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n    let offsetX = point.width / 2 || point.radiusX || 0;\n    let offsetY = point.height / 2 || point.radiusY || 0;\n    return {\n        top: point.clientY - offsetY,\n        right: point.clientX + offsetX,\n        bottom: point.clientY + offsetY,\n        left: point.clientX - offsetX\n    };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n    // check if they cannot overlap on x axis\n    if (a.left > b.right || b.left > a.right) return false;\n    // check if they cannot overlap on y axis\n    if (a.top > b.bottom || b.top > a.bottom) return false;\n    return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n    let rect = target.getBoundingClientRect();\n    let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n    return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n    // We cannot prevent default if the target is a draggable element.\n    return !(target instanceof HTMLElement) || !target.draggable;\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target) {\n    return !((target.tagName === 'INPUT' || target.tagName === 'BUTTON') && target.type === 'submit');\n}\nfunction $f6c31cce2adf654f$var$isVirtualPointerEvent(event) {\n    // If the pointer size is zero, then we assume it's from a screen reader.\n    // Android TalkBack double tap will sometimes return a event with width and height of 1\n    // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n    // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n    // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush\n    // Talkback double tap from Windows Firefox touch screen press\n    return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'mouse';\n}\n\n\n\nconst $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/ $bx7SL$react.forwardRef(({ children: children , ...props }, ref)=>{\n    let newRef = $bx7SL$useRef();\n    ref = ref !== null && ref !== void 0 ? ref : newRef;\n    let { pressProps: pressProps  } = $f6c31cce2adf654f$export$45712eceda6fad21({\n        ...props,\n        ref: ref\n    });\n    let child = $bx7SL$react.Children.only(children);\n    return(/*#__PURE__*/ $bx7SL$react.cloneElement(child, // @ts-ignore\n    {\n        ref: ref,\n        ...$bx7SL$mergeProps(child.props, pressProps)\n    }));\n});\n\n\n\n\n\nconst $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/ $bx7SL$react.forwardRef(({ children: children , ...props }, ref)=>{\n    let isRegistered = $bx7SL$useRef(false);\n    let prevContext = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n    let context = $bx7SL$mergeProps(prevContext || {\n    }, {\n        ...props,\n        ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n        register () {\n            isRegistered.current = true;\n            if (prevContext) prevContext.register();\n        }\n    });\n    $bx7SL$useSyncRef(prevContext, ref);\n    $bx7SL$useEffect(()=>{\n        if (!isRegistered.current) console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n    }, []);\n    return(/*#__PURE__*/ $bx7SL$react.createElement($ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {\n        value: context\n    }, children));\n});\n\n\n\n\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n    let { isDisabled: isDisabled , onFocus: onFocusProp , onBlur: onBlurProp , onFocusChange: onFocusChange  } = props;\n    const onBlur = $bx7SL$useCallback((e)=>{\n        if (e.target === e.currentTarget) {\n            if (onBlurProp) onBlurProp(e);\n            if (onFocusChange) onFocusChange(false);\n            return true;\n        }\n    }, [\n        onBlurProp,\n        onFocusChange\n    ]);\n    const onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n    const onFocus = $bx7SL$useCallback((e)=>{\n        if (e.target === e.currentTarget) {\n            if (onFocusProp) onFocusProp(e);\n            if (onFocusChange) onFocusChange(true);\n            onSyntheticFocus(e);\n        }\n    }, [\n        onFocusChange,\n        onFocusProp,\n        onSyntheticFocus\n    ]);\n    return {\n        focusProps: {\n            onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n            onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null\n        }\n    };\n}\n\n\n\n\n\nlet $507fabe10e71c6fb$var$currentModality = null;\nlet $507fabe10e71c6fb$var$changeHandlers = new Set();\nlet $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;\nlet $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nlet $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n// Only Tab or Esc keys will make focus visible on text input elements\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n    Tab: true,\n    Escape: true\n};\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {\n    for (let handler of $507fabe10e71c6fb$var$changeHandlers)handler(modality, e);\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */ function $507fabe10e71c6fb$var$isValidKey(e) {\n    // Control and Shift keys trigger when navigating back to the tab with keyboard.\n    return !(e.metaKey || !$bx7SL$isMac() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    if ($507fabe10e71c6fb$var$isValidKey(e)) {\n        $507fabe10e71c6fb$var$currentModality = 'keyboard';\n        $507fabe10e71c6fb$var$triggerChangeHandlers('keyboard', e);\n    }\n}\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e) {\n    $507fabe10e71c6fb$var$currentModality = 'pointer';\n    if (e.type === 'mousedown' || e.type === 'pointerdown') {\n        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n        $507fabe10e71c6fb$var$triggerChangeHandlers('pointer', e);\n    }\n}\nfunction $507fabe10e71c6fb$var$handleClickEvent(e) {\n    if ($8a9cb279dc87e130$export$60278871457622de(e)) {\n        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n        $507fabe10e71c6fb$var$currentModality = 'virtual';\n    }\n}\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e) {\n    // Firefox fires two extra focus events when the user first clicks into an iframe:\n    // first on the window, then on the document. We ignore these events so they don't\n    // cause keyboard focus rings to appear.\n    if (e.target === window || e.target === document) return;\n    // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n    // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n    if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n        $507fabe10e71c6fb$var$currentModality = 'virtual';\n        $507fabe10e71c6fb$var$triggerChangeHandlers('virtual', e);\n    }\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n    $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n    // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n    // for example, since a subsequent focus event won't be fired.\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n    $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */ function $507fabe10e71c6fb$var$setupGlobalFocusEvents() {\n    if (typeof window === 'undefined' || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return;\n    // Programmatic focus() calls shouldn't affect the current input modality.\n    // However, we need to detect other cases when a focus event occurs without\n    // a preceding user event (e.g. screen reader focus). Overriding the focus\n    // method on HTMLElement.prototype is a bit hacky, but works.\n    let focus = HTMLElement.prototype.focus;\n    HTMLElement.prototype.focus = function() {\n        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n        focus.apply(this, arguments);\n    };\n    document.addEventListener('keydown', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n    document.addEventListener('keyup', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n    document.addEventListener('click', $507fabe10e71c6fb$var$handleClickEvent, true);\n    // Register focus events on the window so they are sure to happen\n    // before React's event listeners (registered on the document).\n    window.addEventListener('focus', $507fabe10e71c6fb$var$handleFocusEvent, true);\n    window.addEventListener('blur', $507fabe10e71c6fb$var$handleWindowBlur, false);\n    if (typeof PointerEvent !== 'undefined') {\n        document.addEventListener('pointerdown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener('pointermove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener('pointerup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    } else {\n        document.addEventListener('mousedown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener('mousemove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener('mouseup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    }\n    $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;\n}\nif (typeof document !== 'undefined') {\n    if (document.readyState !== 'loading') $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n    else document.addEventListener('DOMContentLoaded', $507fabe10e71c6fb$var$setupGlobalFocusEvents);\n}\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n    return $507fabe10e71c6fb$var$currentModality !== 'pointer';\n}\nfunction $507fabe10e71c6fb$export$630ff653c5ada6a9() {\n    return $507fabe10e71c6fb$var$currentModality;\n}\nfunction $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {\n    $507fabe10e71c6fb$var$currentModality = modality;\n    $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);\n}\nfunction $507fabe10e71c6fb$export$98e20ec92f614cfe() {\n    $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n    let [modality, setModality] = $bx7SL$useState($507fabe10e71c6fb$var$currentModality);\n    $bx7SL$useEffect(()=>{\n        let handler = ()=>{\n            setModality($507fabe10e71c6fb$var$currentModality);\n        };\n        $507fabe10e71c6fb$var$changeHandlers.add(handler);\n        return ()=>{\n            $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n        };\n    }, []);\n    return modality;\n}\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */ function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n    return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\nfunction $507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {\n}) {\n    let { isTextInput: isTextInput , autoFocus: autoFocus  } = props;\n    let [isFocusVisibleState, setFocusVisible] = $bx7SL$useState(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());\n    $507fabe10e71c6fb$export$ec71b4b83ac08ec3(($507fabe10e71c6fb$export$b9b3dfddab17db27)=>{\n        setFocusVisible($507fabe10e71c6fb$export$b9b3dfddab17db27);\n    }, [\n        isTextInput\n    ], {\n        isTextInput: isTextInput\n    });\n    return {\n        isFocusVisible: isFocusVisibleState\n    };\n}\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n    $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n    $bx7SL$useEffect(()=>{\n        let handler = (modality, e)=>{\n            if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n            fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n        };\n        $507fabe10e71c6fb$var$changeHandlers.add(handler);\n        return ()=>{\n            $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n        };\n    }, deps);\n}\n\n\n\n\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n    let { isDisabled: isDisabled , onBlurWithin: onBlurWithin , onFocusWithin: onFocusWithin , onFocusWithinChange: onFocusWithinChange  } = props;\n    let state = $bx7SL$useRef({\n        isFocusWithin: false\n    });\n    let onBlur = $bx7SL$useCallback((e)=>{\n        // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n        // when moving focus inside the element. Only trigger if the currentTarget doesn't\n        // include the relatedTarget (where focus is moving).\n        if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n            state.current.isFocusWithin = false;\n            if (onBlurWithin) onBlurWithin(e);\n            if (onFocusWithinChange) onFocusWithinChange(false);\n        }\n    }, [\n        onBlurWithin,\n        onFocusWithinChange,\n        state\n    ]);\n    let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n    let onFocus = $bx7SL$useCallback((e)=>{\n        if (!state.current.isFocusWithin) {\n            if (onFocusWithin) onFocusWithin(e);\n            if (onFocusWithinChange) onFocusWithinChange(true);\n            state.current.isFocusWithin = true;\n            onSyntheticFocus(e);\n        }\n    }, [\n        onFocusWithin,\n        onFocusWithinChange,\n        onSyntheticFocus\n    ]);\n    if (isDisabled) return {\n        focusWithinProps: {\n            onFocus: null,\n            onBlur: null\n        }\n    };\n    return {\n        focusWithinProps: {\n            onFocus: onFocus,\n            onBlur: onBlur\n        }\n    };\n}\n\n\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;\n    // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n    // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n    // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n    // the distant future because a user previously touched the element.\n    setTimeout(()=>{\n        $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n    }, 50);\n}\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n    if (e.pointerType === 'touch') $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n    if (typeof document === 'undefined') return;\n    if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);\n    else document.addEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n    $6179b936705e76d3$var$hoverCount++;\n    return ()=>{\n        $6179b936705e76d3$var$hoverCount--;\n        if ($6179b936705e76d3$var$hoverCount > 0) return;\n        if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);\n        else document.removeEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n    };\n}\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n    let { onHoverStart: onHoverStart , onHoverChange: onHoverChange , onHoverEnd: onHoverEnd , isDisabled: isDisabled  } = props;\n    let [isHovered, setHovered] = $bx7SL$useState(false);\n    let state = $bx7SL$useRef({\n        isHovered: false,\n        ignoreEmulatedMouseEvents: false,\n        pointerType: '',\n        target: null\n    }).current;\n    $bx7SL$useEffect($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n    let { hoverProps: hoverProps1 , triggerHoverEnd: triggerHoverEnd1  } = $bx7SL$useMemo(()=>{\n        let triggerHoverStart = (event, pointerType)=>{\n            state.pointerType = pointerType;\n            if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;\n            state.isHovered = true;\n            let target = event.currentTarget;\n            state.target = target;\n            if (onHoverStart) onHoverStart({\n                type: 'hoverstart',\n                target: target,\n                pointerType: pointerType\n            });\n            if (onHoverChange) onHoverChange(true);\n            setHovered(true);\n        };\n        let triggerHoverEnd = (event, pointerType)=>{\n            state.pointerType = '';\n            state.target = null;\n            if (pointerType === 'touch' || !state.isHovered) return;\n            state.isHovered = false;\n            let target = event.currentTarget;\n            if (onHoverEnd) onHoverEnd({\n                type: 'hoverend',\n                target: target,\n                pointerType: pointerType\n            });\n            if (onHoverChange) onHoverChange(false);\n            setHovered(false);\n        };\n        let hoverProps = {\n        };\n        if (typeof PointerEvent !== 'undefined') {\n            hoverProps.onPointerEnter = (e)=>{\n                if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;\n                triggerHoverStart(e, e.pointerType);\n            };\n            hoverProps.onPointerLeave = (e)=>{\n                if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n            };\n        } else {\n            hoverProps.onTouchStart = ()=>{\n                state.ignoreEmulatedMouseEvents = true;\n            };\n            hoverProps.onMouseEnter = (e)=>{\n                if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');\n                state.ignoreEmulatedMouseEvents = false;\n            };\n            hoverProps.onMouseLeave = (e)=>{\n                if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');\n            };\n        }\n        return {\n            hoverProps: hoverProps,\n            triggerHoverEnd: triggerHoverEnd\n        };\n    }, [\n        onHoverStart,\n        onHoverChange,\n        onHoverEnd,\n        isDisabled,\n        state\n    ]);\n    $bx7SL$useEffect(()=>{\n        // Call the triggerHoverEnd as soon as isDisabled changes to true\n        // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n        if (isDisabled) triggerHoverEnd1({\n            currentTarget: state.target\n        }, state.pointerType);\n    }, [\n        isDisabled\n    ]);\n    return {\n        hoverProps: hoverProps1,\n        isHovered: isHovered\n    };\n}\n\n\n\nfunction $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {\n    let { ref: ref , onInteractOutside: onInteractOutside , isDisabled: isDisabled , onInteractOutsideStart: onInteractOutsideStart  } = props;\n    let stateRef = $bx7SL$useRef({\n        isPointerDown: false,\n        ignoreEmulatedMouseEvents: false,\n        onInteractOutside: onInteractOutside,\n        onInteractOutsideStart: onInteractOutsideStart\n    });\n    let state = stateRef.current;\n    state.onInteractOutside = onInteractOutside;\n    state.onInteractOutsideStart = onInteractOutsideStart;\n    $bx7SL$useEffect(()=>{\n        if (isDisabled) return;\n        let onPointerDown = (e)=>{\n            if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {\n                if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);\n                state.isPointerDown = true;\n            }\n        };\n        // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n        if (typeof PointerEvent !== 'undefined') {\n            let onPointerUp = (e)=>{\n                if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n                    state.isPointerDown = false;\n                    state.onInteractOutside(e);\n                }\n            };\n            // changing these to capture phase fixed combobox\n            document.addEventListener('pointerdown', onPointerDown, true);\n            document.addEventListener('pointerup', onPointerUp, true);\n            return ()=>{\n                document.removeEventListener('pointerdown', onPointerDown, true);\n                document.removeEventListener('pointerup', onPointerUp, true);\n            };\n        } else {\n            let onMouseUp = (e)=>{\n                if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;\n                else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n                    state.isPointerDown = false;\n                    state.onInteractOutside(e);\n                }\n            };\n            let onTouchEnd = (e)=>{\n                state.ignoreEmulatedMouseEvents = true;\n                if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n                    state.isPointerDown = false;\n                    state.onInteractOutside(e);\n                }\n            };\n            document.addEventListener('mousedown', onPointerDown, true);\n            document.addEventListener('mouseup', onMouseUp, true);\n            document.addEventListener('touchstart', onPointerDown, true);\n            document.addEventListener('touchend', onTouchEnd, true);\n            return ()=>{\n                document.removeEventListener('mousedown', onPointerDown, true);\n                document.removeEventListener('mouseup', onMouseUp, true);\n                document.removeEventListener('touchstart', onPointerDown, true);\n                document.removeEventListener('touchend', onTouchEnd, true);\n            };\n        }\n    }, [\n        ref,\n        state,\n        isDisabled\n    ]);\n}\nfunction $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {\n    if (event.button > 0) return false;\n    // if the event target is no longer in the document\n    if (event.target) {\n        const ownerDocument = event.target.ownerDocument;\n        if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;\n    }\n    return ref.current && !ref.current.contains(event.target);\n}\n\n\nfunction $93925083ecbb358c$export$48d1ea6320830260(handler) {\n    if (!handler) return;\n    let shouldStopPropagation = true;\n    return (e)=>{\n        let event = {\n            ...e,\n            preventDefault () {\n                e.preventDefault();\n            },\n            isDefaultPrevented () {\n                return e.isDefaultPrevented();\n            },\n            stopPropagation () {\n                console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n            },\n            continuePropagation () {\n                shouldStopPropagation = false;\n            }\n        };\n        handler(event);\n        if (shouldStopPropagation) e.stopPropagation();\n    };\n}\n\n\nfunction $46d819fcbaf35654$export$8f71654801c2f7cd(props) {\n    return {\n        keyboardProps: props.isDisabled ? {\n        } : {\n            onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),\n            onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)\n        }\n    };\n}\n\n\n\n\n\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n    let { onMoveStart: onMoveStart , onMove: onMove , onMoveEnd: onMoveEnd  } = props;\n    let state = $bx7SL$useRef({\n        didMove: false,\n        lastPosition: null,\n        id: null\n    });\n    let { addGlobalListener: addGlobalListener , removeGlobalListener: removeGlobalListener  } = $bx7SL$useGlobalListeners();\n    let moveProps1 = $bx7SL$useMemo(()=>{\n        let moveProps = {\n        };\n        let start = ()=>{\n            $14c0b72509d70225$export$16a4697467175487();\n            state.current.didMove = false;\n        };\n        let move = (originalEvent, pointerType, deltaX, deltaY)=>{\n            if (deltaX === 0 && deltaY === 0) return;\n            if (!state.current.didMove) {\n                state.current.didMove = true;\n                onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n                    type: 'movestart',\n                    pointerType: pointerType,\n                    shiftKey: originalEvent.shiftKey,\n                    metaKey: originalEvent.metaKey,\n                    ctrlKey: originalEvent.ctrlKey,\n                    altKey: originalEvent.altKey\n                });\n            }\n            onMove({\n                type: 'move',\n                pointerType: pointerType,\n                deltaX: deltaX,\n                deltaY: deltaY,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n        };\n        let end = (originalEvent, pointerType)=>{\n            $14c0b72509d70225$export$b0d6fa1ab32e3295();\n            if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n                type: 'moveend',\n                pointerType: pointerType,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n        };\n        if (typeof PointerEvent === 'undefined') {\n            let onMouseMove = (e)=>{\n                if (e.button === 0) {\n                    move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                }\n            };\n            let onMouseUp = (e)=>{\n                if (e.button === 0) {\n                    end(e, 'mouse');\n                    removeGlobalListener(window, 'mousemove', onMouseMove, false);\n                    removeGlobalListener(window, 'mouseup', onMouseUp, false);\n                }\n            };\n            moveProps.onMouseDown = (e)=>{\n                if (e.button === 0) {\n                    start();\n                    e.stopPropagation();\n                    e.preventDefault();\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                    addGlobalListener(window, 'mousemove', onMouseMove, false);\n                    addGlobalListener(window, 'mouseup', onMouseUp, false);\n                }\n            };\n            let onTouchMove = (e)=>{\n                let touch = [\n                    ...e.changedTouches\n                ].findIndex(({ identifier: identifier  })=>identifier === state.current.id\n                );\n                if (touch >= 0) {\n                    let { pageX: pageX , pageY: pageY  } = e.changedTouches[touch];\n                    move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n                    state.current.lastPosition = {\n                        pageX: pageX,\n                        pageY: pageY\n                    };\n                }\n            };\n            let onTouchEnd = (e)=>{\n                let touch = [\n                    ...e.changedTouches\n                ].findIndex(({ identifier: identifier  })=>identifier === state.current.id\n                );\n                if (touch >= 0) {\n                    end(e, 'touch');\n                    state.current.id = null;\n                    removeGlobalListener(window, 'touchmove', onTouchMove);\n                    removeGlobalListener(window, 'touchend', onTouchEnd);\n                    removeGlobalListener(window, 'touchcancel', onTouchEnd);\n                }\n            };\n            moveProps.onTouchStart = (e)=>{\n                if (e.changedTouches.length === 0 || state.current.id != null) return;\n                let { pageX: pageX , pageY: pageY , identifier: identifier  } = e.changedTouches[0];\n                start();\n                e.stopPropagation();\n                e.preventDefault();\n                state.current.lastPosition = {\n                    pageX: pageX,\n                    pageY: pageY\n                };\n                state.current.id = identifier;\n                addGlobalListener(window, 'touchmove', onTouchMove, false);\n                addGlobalListener(window, 'touchend', onTouchEnd, false);\n                addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n            };\n        } else {\n            let onPointerMove = (e)=>{\n                if (e.pointerId === state.current.id) {\n                    let pointerType = e.pointerType || 'mouse';\n                    // Problems with PointerEvent#movementX/movementY:\n                    // 1. it is always 0 on macOS Safari.\n                    // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n                    move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                }\n            };\n            let onPointerUp = (e)=>{\n                if (e.pointerId === state.current.id) {\n                    let pointerType = e.pointerType || 'mouse';\n                    end(e, pointerType);\n                    state.current.id = null;\n                    removeGlobalListener(window, 'pointermove', onPointerMove, false);\n                    removeGlobalListener(window, 'pointerup', onPointerUp, false);\n                    removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n                }\n            };\n            moveProps.onPointerDown = (e)=>{\n                if (e.button === 0 && state.current.id == null) {\n                    start();\n                    e.stopPropagation();\n                    e.preventDefault();\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                    state.current.id = e.pointerId;\n                    addGlobalListener(window, 'pointermove', onPointerMove, false);\n                    addGlobalListener(window, 'pointerup', onPointerUp, false);\n                    addGlobalListener(window, 'pointercancel', onPointerUp, false);\n                }\n            };\n        }\n        let triggerKeyboardMove = (e, deltaX, deltaY)=>{\n            start();\n            move(e, 'keyboard', deltaX, deltaY);\n            end(e, 'keyboard');\n        };\n        moveProps.onKeyDown = (e)=>{\n            switch(e.key){\n                case 'Left':\n                case 'ArrowLeft':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, -1, 0);\n                    break;\n                case 'Right':\n                case 'ArrowRight':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, 1, 0);\n                    break;\n                case 'Up':\n                case 'ArrowUp':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, 0, -1);\n                    break;\n                case 'Down':\n                case 'ArrowDown':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, 0, 1);\n                    break;\n            }\n        };\n        return moveProps;\n    }, [\n        state,\n        onMoveStart,\n        onMove,\n        onMoveEnd,\n        addGlobalListener,\n        removeGlobalListener\n    ]);\n    return {\n        moveProps: moveProps1\n    };\n}\n\n\n\n\n\nfunction $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n    let { onScroll: onScroll , isDisabled: isDisabled  } = props;\n    let onScrollHandler = $bx7SL$useCallback((e)=>{\n        // If the ctrlKey is pressed, this is a zoom event, do nothing.\n        if (e.ctrlKey) return;\n        // stop scrolling the page\n        e.preventDefault();\n        e.stopPropagation();\n        if (onScroll) onScroll({\n            deltaX: e.deltaX,\n            deltaY: e.deltaY\n        });\n    }, [\n        onScroll\n    ]);\n    $bx7SL$useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n\n\n\n\n\nconst $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n    let { isDisabled: isDisabled , onLongPressStart: onLongPressStart , onLongPressEnd: onLongPressEnd , onLongPress: onLongPress , threshold: threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD , accessibilityDescription: accessibilityDescription  } = props;\n    const timeRef = $bx7SL$useRef(null);\n    let { addGlobalListener: addGlobalListener , removeGlobalListener: removeGlobalListener  } = $bx7SL$useGlobalListeners();\n    let { pressProps: pressProps  } = $f6c31cce2adf654f$export$45712eceda6fad21({\n        isDisabled: isDisabled,\n        onPressStart (e1) {\n            if (e1.pointerType === 'mouse' || e1.pointerType === 'touch') {\n                if (onLongPressStart) onLongPressStart({\n                    ...e1,\n                    type: 'longpressstart'\n                });\n                timeRef.current = setTimeout(()=>{\n                    // Prevent other usePress handlers from also handling this event.\n                    e1.target.dispatchEvent(new PointerEvent('pointercancel', {\n                        bubbles: true\n                    }));\n                    if (onLongPress) onLongPress({\n                        ...e1,\n                        type: 'longpress'\n                    });\n                    timeRef.current = null;\n                }, threshold);\n                // Prevent context menu, which may be opened on long press on touch devices\n                if (e1.pointerType === 'touch') {\n                    let onContextMenu = (e)=>{\n                        e.preventDefault();\n                    };\n                    addGlobalListener(e1.target, 'contextmenu', onContextMenu, {\n                        once: true\n                    });\n                    addGlobalListener(window, 'pointerup', ()=>{\n                        // If no contextmenu event is fired quickly after pointerup, remove the handler\n                        // so future context menu events outside a long press are not prevented.\n                        setTimeout(()=>{\n                            removeGlobalListener(e1.target, 'contextmenu', onContextMenu);\n                        }, 30);\n                    }, {\n                        once: true\n                    });\n                }\n            }\n        },\n        onPressEnd (e) {\n            if (timeRef.current) clearTimeout(timeRef.current);\n            if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({\n                ...e,\n                type: 'longpressend'\n            });\n        }\n    });\n    let descriptionProps = $bx7SL$useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n    return {\n        longPressProps: $bx7SL$mergeProps(pressProps, descriptionProps)\n    };\n}\n\n\n\n\nexport {$3b117e43dc0ca95d$export$27c701ed9e449e99 as Pressable, $f1ab8c75478c6f73$export$3351871ee4b288b8 as PressResponder, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6 as useFocus, $507fabe10e71c6fb$export$b9b3dfddab17db27 as isFocusVisible, $507fabe10e71c6fb$export$630ff653c5ada6a9 as getInteractionModality, $507fabe10e71c6fb$export$8397ddfc504fdb9a as setInteractionModality, $507fabe10e71c6fb$export$98e20ec92f614cfe as useInteractionModality, $507fabe10e71c6fb$export$ffd9e5021c1fb2d6 as useFocusVisible, $507fabe10e71c6fb$export$ec71b4b83ac08ec3 as useFocusVisibleListener, $9ab94262bd0047c7$export$420e68273165f4ec as useFocusWithin, $6179b936705e76d3$export$ae780daf29e6d456 as useHover, $e0b6e0b68ec7f50f$export$872b660ac5a1ff98 as useInteractOutside, $46d819fcbaf35654$export$8f71654801c2f7cd as useKeyboard, $e8a7022cf87cba2a$export$36da96379f79f245 as useMove, $f6c31cce2adf654f$export$45712eceda6fad21 as usePress, $7d0a636d7a4dcefd$export$2123ff2b87c81ca as useScrollWheel, $8a26561d2877236e$export$c24ed0104d07eab9 as useLongPress};\n//# sourceMappingURL=module.js.map\n"],"names":["$14c0b72509d70225$var$state","$14c0b72509d70225$var$savedUserSelect","$14c0b72509d70225$var$modifiedElementMap","$14c0b72509d70225$export$16a4697467175487","target","$bx7SL$isIOS","$14c0b72509d70225$export$b0d6fa1ab32e3295","$bx7SL$runAfterTransition","targetOldUserSelect","$8a9cb279dc87e130$export$60278871457622de","event","$8a9cb279dc87e130$export$905e7fc544a71f36","type","nativeEvent","$8a9cb279dc87e130$export$715c682d09d639cc","onBlur","stateRef","$bx7SL$useRef","$bx7SL$useLayoutEffect","state","$bx7SL$useCallback","e1","onBlurHandler","e","_current","ref","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","$bx7SL$react","$f6c31cce2adf654f$var$usePressResponderContext","props","context","$bx7SL$useContext","register","contextProps","$bx7SL$mergeProps","$bx7SL$useSyncRef","$f6c31cce2adf654f$export$45712eceda6fad21","onPress1","onPressChange1","onPressStart1","onPressEnd1","onPressUp1","isDisabled1","isPressedProp","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","_","domProps","propsRef","isPressed","setPressed","$bx7SL$useState","addGlobalListener","removeAllGlobalListeners","$bx7SL$useGlobalListeners","pressProps1","$bx7SL$useMemo","triggerPressStart","originalEvent","pointerType","onPressStart","onPressChange","isDisabled","triggerPressEnd","wasPressed","onPressEnd","onPress","triggerPressUp","onPressUp","cancel","$f6c31cce2adf654f$var$createEvent","pressProps","$f6c31cce2adf654f$var$isValidKeyboardEvent","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","onKeyUp","$bx7SL$focusWithoutScrolling","$f6c31cce2adf654f$var$isHTMLAnchorLink","$f6c31cce2adf654f$var$isVirtualPointerEvent","$f6c31cce2adf654f$var$shouldPreventDefault","onPointerMove","onPointerUp","onPointerCancel","$f6c31cce2adf654f$var$isOverTarget","onMouseUp","touch","$f6c31cce2adf654f$var$getTouchFromEvent","onScroll","$f6c31cce2adf654f$var$getTouchById","$bx7SL$useEffect","key","code","element","tagName","isContentEditable","role","targetTouches","pointerId","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","offsetY","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","rect","pointRect","$a1ea59d68270f0dd$export$f8168d8dd8fd66e6","onFocusProp","onBlurProp","onFocusChange","onSyntheticFocus","onFocus","$507fabe10e71c6fb$var$currentModality","$507fabe10e71c6fb$var$changeHandlers","$507fabe10e71c6fb$var$hasSetupGlobalListeners","$507fabe10e71c6fb$var$hasEventBeforeFocus","$507fabe10e71c6fb$var$hasBlurredWindowRecently","$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS","$507fabe10e71c6fb$var$triggerChangeHandlers","modality","handler","$507fabe10e71c6fb$var$isValidKey","$bx7SL$isMac","$507fabe10e71c6fb$var$handleKeyboardEvent","$507fabe10e71c6fb$var$handlePointerEvent","$507fabe10e71c6fb$var$handleClickEvent","$507fabe10e71c6fb$var$handleFocusEvent","$507fabe10e71c6fb$var$handleWindowBlur","$507fabe10e71c6fb$var$setupGlobalFocusEvents","focus","$507fabe10e71c6fb$export$b9b3dfddab17db27","$507fabe10e71c6fb$export$630ff653c5ada6a9","$507fabe10e71c6fb$var$isKeyboardFocusEvent","isTextInput","$507fabe10e71c6fb$export$ec71b4b83ac08ec3","fn","deps","opts","$9ab94262bd0047c7$export$420e68273165f4ec","onBlurWithin","onFocusWithin","onFocusWithinChange","$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$hoverCount","$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$handleGlobalPointerEvent","$6179b936705e76d3$var$setupGlobalTouchEvents","$6179b936705e76d3$export$ae780daf29e6d456","onHoverStart","onHoverChange","onHoverEnd","isHovered","setHovered","hoverProps1","triggerHoverEnd1","triggerHoverStart","triggerHoverEnd","hoverProps","$e0b6e0b68ec7f50f$export$872b660ac5a1ff98","onInteractOutside","onInteractOutsideStart","onPointerDown","$e0b6e0b68ec7f50f$var$isValidEvent","onTouchEnd","ownerDocument","$93925083ecbb358c$export$48d1ea6320830260","shouldStopPropagation","$46d819fcbaf35654$export$8f71654801c2f7cd","$8a26561d2877236e$var$DEFAULT_THRESHOLD","$8a26561d2877236e$export$c24ed0104d07eab9","onLongPressStart","onLongPressEnd","onLongPress","threshold","accessibilityDescription","timeRef","removeGlobalListener","onContextMenu","descriptionProps","$bx7SL$useDescription"],"mappings":"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"}