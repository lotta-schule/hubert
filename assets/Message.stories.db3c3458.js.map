{"version":3,"file":"Message.stories.db3c3458.js","sources":["../../src/message/Message.tsx","../../src/message/ErrorMessage.tsx","../../src/message/SuccessMessage.tsx"],"sourcesContent":["import * as React from 'react';\nimport { motion } from 'framer-motion';\nimport clsx from 'clsx';\n\nimport styles from './Message.module.scss';\n\nexport interface MessageProps extends React.HTMLProps<HTMLDivElement> {\n  message?: string | null;\n  color: string;\n  className?: string;\n  children?: any;\n}\n\nexport const Message = React.memo<MessageProps>(\n  ({ message, color, className, children, ...otherProps }) => {\n    const otherStyle: React.CSSProperties = {\n      backgroundColor: `color(${color} saturation(-30))`,\n      borderColor: color,\n    };\n\n    return (\n      <motion.div\n        role={'alert'}\n        aria-label={message || undefined}\n        style={otherStyle}\n        className={clsx(styles.root, className)}\n        variants={{\n          visible: { opacity: 1, height: 'auto' },\n          hidden: { opacity: 0, height: 0 },\n        }}\n        animate={message ? 'visible' : 'hidden'}\n        {...(otherProps as any)}\n      >\n        {message}\n        {children}\n      </motion.div>\n    );\n  }\n);\nMessage.displayName = 'Message';\n","import * as React from 'react';\nimport { useTheme } from '../theme';\nimport { Message } from './Message';\n\nexport interface ErrorMessageProps {\n  error?: Error | string | null;\n  className?: string;\n  children?: any;\n}\n\nexport const ErrorMessage = React.memo<ErrorMessageProps>(\n  ({ error, className, children }) => {\n    const theme = useTheme();\n\n    const errorMessage = React.useMemo(() => {\n      const errorMessage = typeof error === 'string' ? error : error?.message;\n      if (errorMessage) {\n        return errorMessage.replace(/^GraphQL error: /, '');\n      }\n    }, [error]);\n\n    if (!(children || errorMessage)) {\n      return null;\n    }\n\n    return (\n      <Message\n        role={'alert'}\n        color={theme.errorColor}\n        message={errorMessage}\n        className={className}\n      >\n        {children}\n      </Message>\n    );\n  }\n);\nErrorMessage.displayName = 'ErrorMessage';\n","import * as React from 'react';\nimport { useTheme } from '../theme';\nimport { Message } from './Message';\n\nexport interface SuccessMessageProps {\n  message?: string;\n  className?: string;\n}\n\nexport const SuccessMessage = React.memo<SuccessMessageProps>(\n  ({ message, className }) => {\n    const theme = useTheme();\n\n    return (\n      <Message\n        color={theme.successColor}\n        message={message}\n        className={className}\n      />\n    );\n  }\n);\nSuccessMessage.displayName = 'SuccessMessage';\n"],"names":["Message","React.memo","message","color","className","children","otherStyle","_jsxs","motion","undefined","otherProps","ErrorMessage","error","theme","useTheme","errorMessage","React.useMemo","errorMessage2","_jsx","errorColor","SuccessMessage","successColor"],"mappings":"0RAaOA,EAAAC,EAAA,QAAA,KAAA,CAAA,CACJ,QAAAC,EAAEA,MAAAA,EAASC,UAAAA,EAAOC,SAAAA,KAAWC,CAA7B,IAAA,CACC,MAAAC,EAAA,CAAwC,gBAAA,SAAAH,qBACZA,YAAAA,CACbA,EAGf,OAAAI,EAAAC,EAAA,IAAA,CACE,KAAA,QACQ,aAAAN,GAAA,OACiBO,MAAAA,EAChBH,UAAAA,EAAAA,EAAAA,KAAAA,CAAAA,EACQ,SAAA,CACL,QAAA,CACC,QAAA,EAAW,OAAA,MAAW,EAAtB,OAAA,CACD,QAAA,EAAW,OAAA,CAAW,CAAtB,EAFA,QAAAJ,EAAA,UAAA,SAIqB,GAAAQ,EAC1BA,SAAAA,CAAAA,EAAAA,CAAAA,CAVP,CAAA,CAgBH,CAAA,EAEHV,EAAAA,YAAAA,sjBC7BO,MAAAW,EAAAV,EAAA,QAAA,KAAA,CAAA,CACJ,MAAAW,EAAEA,UAAAA,EAAOR,SAAAA,CAAT,IAAA,CACC,MAAAS,EAAAC,IAEAC,EAAAC,EAAAA,QAAAA,QAAA,IAAA,CACE,MAAAC,EAAA,OAAAL,GAAA,SAAAA,EAAAA,GAAA,YAAAA,EAAA,QACA,GAAAK,EACE,OAAAA,EAAA,QAAA,mBAAA,EAAA,CACD,EAAA,CAAAL,CAAA,CAAA,EAGH,OAAAP,GAAAU,EAIAG,EAAAlB,EAAA,CACE,KAAA,QACQ,MAAAa,EAAA,WACOM,QAAAA,EACJJ,UAAAA,EACT,SAAAV,CAJF,CAAA,EAJA,IAaH,CAAA,EAEHM,EAAAA,YAAAA,2gBC5BO,MAAAS,EAAAnB,EAAA,QAAA,KAAA,CAAA,CACJ,QAAAC,EAAEA,UAAAA,CAAF,IAAA,CACC,MAAAW,EAAAC,IAEA,OAAAI,EAAAlB,EAAA,CACE,MAAAa,EAAA,aACeQ,QAAAA,EACb,UAAAjB,CACA,CAAA,CAGL,CAAA,EAEHgB,EAAAA,YAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}