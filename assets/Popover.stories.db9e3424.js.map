{"version":3,"file":"Popover.stories.db9e3424.js","sources":["../../src/popover/PopoverOverlay.tsx","../../src/popover/Popover.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FocusScope } from '@react-aria/focus';\nimport { DismissButton, useOverlay } from '@react-aria/overlays';\nimport { Box } from '../layout';\nimport { motion } from 'framer-motion';\nimport clsx from 'clsx';\n\nimport styles from './PopoverOverlay.module.scss';\n\nexport interface PopoverOverlayProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  isOpen: boolean;\n  onClose: () => void;\n  style?: React.CSSProperties;\n  className?: string;\n  children: React.ReactNode;\n}\n\nconst AnimatedBox = motion(Box);\n\nexport const PopoverOverlay = React.forwardRef(\n  (\n    {\n      children,\n      isOpen,\n      onClose,\n      className,\n      style,\n      ...divProps\n    }: PopoverOverlayProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const { overlayProps } = useOverlay(\n      {\n        onClose,\n        isOpen,\n        isDismissable: true,\n      },\n      ref as React.RefObject<HTMLDivElement>\n    );\n\n    return (\n      <FocusScope restoreFocus>\n        <AnimatedBox\n          role={'presentation'}\n          {...(overlayProps as any)}\n          {...divProps}\n          className={clsx(styles.root, className)}\n          style={style}\n          ref={ref}\n          initial={'closed'}\n          animate={isOpen ? 'open' : 'closed'}\n          variants={{\n            open: { opacity: 1, height: 'auto', y: 0 },\n            closed: { opacity: 0, height: 0, y: -50 },\n          }}\n        >\n          {children}\n          <DismissButton onDismiss={onClose} />\n        </AnimatedBox>\n      </FocusScope>\n    );\n  }\n);\nPopoverOverlay.displayName = 'PopoverOverlay';\n","import * as React from 'react';\nimport { useOverlayTrigger } from '@react-aria/overlays';\nimport { useOverlayTriggerState } from '@react-stately/overlays';\nimport { useButton } from '@react-aria/button';\nimport { Button, ButtonProps } from '../button';\nimport { PopoverOverlay } from './PopoverOverlay';\nimport { usePopper } from 'react-popper';\n\nexport interface PopoverProps extends React.HTMLAttributes<HTMLDivElement> {\n  buttonProps?: ButtonProps;\n  style?: React.CSSProperties;\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport const Popover = ({\n  buttonProps,\n  style,\n  children,\n  ...divProps\n}: PopoverProps) => {\n  const state = useOverlayTriggerState({});\n\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const overlayRef = React.useRef<HTMLDivElement>(null);\n\n  const { styles: popperStyles, attributes: popperAttributes } = usePopper(\n    triggerRef.current,\n    overlayRef.current,\n    { placement: 'auto', strategy: 'fixed' }\n  );\n\n  const { triggerProps, overlayProps } = useOverlayTrigger(\n    { type: 'dialog' },\n    state,\n    triggerRef\n  );\n\n  const { buttonProps: buttonAttributes } = useButton(\n    {\n      onPress: () => state.open(),\n    },\n    triggerRef\n  );\n\n  const triggerElement = React.useMemo(\n    () =>\n      React.createElement(Button, {\n        ...triggerProps,\n        ...buttonAttributes,\n        ...buttonProps,\n        ref: triggerRef,\n      }),\n    [buttonAttributes, buttonProps, triggerProps]\n  );\n\n  return (\n    <>\n      {triggerElement}\n      {state.isOpen && (\n        <PopoverOverlay\n          {...overlayProps}\n          {...popperAttributes.popper}\n          {...divProps}\n          style={{ ...popperStyles.popper, ...style }}\n          ref={overlayRef}\n          isOpen={state.isOpen}\n          onClose={state.close}\n        >\n          {children}\n        </PopoverOverlay>\n      )}\n    </>\n  );\n};\n"],"names":["AnimatedBox","motion","Box","PopoverOverlay","React.forwardRef","children","isOpen","onClose","className","style","ref","overlayProps","_jsx","FocusScope","_jsxs","divProps","DismissButton","Popover","buttonProps","state","useOverlayTriggerState","triggerRef","React.useRef","overlayRef","popperStyles","popperAttributes","triggerProps","buttonAttributes","triggerElement","React.useMemo","React.createElement","Button","_Fragment","popper","close"],"mappings":"qyBAkBAA,EAAAC,EAAAC,CAAA,EAEOC,EAAAC,EAAA,QAAA,WAAA,CAAA,CAEH,SAAAC,EACEA,OAAAA,EACAC,QAAAA,EACAC,UAAAA,EACAC,MAAAA,KACAC,CALF,EAAAC,IAAA,CAUA,KAAA,CAAM,aAAAC,CAAEA,EAAAA,EAAAA,CACN,QAAAJ,EACEA,OAAAA,EACAD,cAAAA,EACe,EAAAI,CAAA,EAKnB,OAAAE,EAAAC,EAAA,CACE,aAAA,GAAA,SAAAC,EAAAd,EAAA,CACE,KAAA,eACQ,GAAAW,EACDA,GAAAA,EACDI,UAAAA,EAAAA,EAAAA,KAAAA,CAAAA,EACW,MAAAN,EACf,IAAAC,EACA,QAAA,SACS,QAAAJ,EAAA,OAAA,SACkB,SAAA,CACjB,KAAA,CACF,QAAA,EAAW,OAAA,OAAW,EAAA,CAAW,EAAjC,OAAA,CACE,QAAA,EAAW,OAAA,EAAW,EAAA,GAAM,CAA5B,EAFA,SAAA,CAAAD,EAAAO,EAAAI,EAAA,CAMV,UAAAT,CAA0BA,CAAAA,CAAAA,CAf5B,CAAA,CAAA,CAAA,CAmBL,CAAA,EAEHJ,EAAAA,YAAAA,4sBCjDO,MAAAc,EAAA,CAAA,CAAiB,YAAAC,EACtBA,MAAAA,EACAT,SAAAA,KACAJ,CAHsB,IAAA,CAMtB,MAAAc,EAAAC,EAAA,CAAA,CAAA,EAEAC,EAAAC,iBAAA,IAAA,EACAC,EAAAD,iBAAA,IAAA,EAEA,CAAM,OAAAE,EAAUA,WAAAA,CAA0BC,EAAAA,EAAAA,EAAAA,QAAAA,EAAAA,QAAAA,CAGxC,UAAA,OAAa,SAAA,OAAkB,CAAA,EAGjC,CAAM,aAAAC,EAAEA,aAAAA,CAAcf,EAAAA,EAAAA,CACpB,KAAA,QAAQ,EAAAQ,EAAAE,CAAA,EAKV,CAAM,YAAAM,CAAeA,EAAAA,EAAAA,CACnB,QAAA,IAAAR,EAAA,KAAA,CACiB,EAAAE,CAAA,EAKnBO,EAAAC,EAAAA,QAAAA,QAAA,IAAAC,EAAAA,QAAAA,cAAAC,EAAA,CAEgC,GAAAL,EACvBA,GAAAA,EACAC,GAAAA,EACAT,IAAAA,CACEG,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAKX,OAAAP,EAAAkB,EAAA,CACE,SAAA,CAAAJ,EAAAT,EAAA,QAAAP,EAAAT,EAAA,CAGI,GAAAQ,EACMA,GAAAA,EAAAA,OACiBsB,GAAAA,EACjBlB,MAAAA,CACG,GAAAS,EAAA,OAAkBS,GAAAA,CAAWxB,EAA7B,IAAAc,EACFA,OAAAA,EAAAA,OACSjB,QAAAA,EAAAA,MACC4B,SAAAA,CAPjB,CAAA,CAAA,CAHJ,CAAA,CAiBH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}