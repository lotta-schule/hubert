{"version":3,"file":"Select.c75c9d6b.js","sources":["../../node_modules/@react-stately/toggle/dist/module.js","../../node_modules/@react-aria/toggle/dist/module.js","../../node_modules/@react-aria/checkbox/dist/module.js","../../src/form/checkbox/Checkbox.tsx","../../src/form/radio/Radio.tsx","../../src/form/radio/RadioGroup.tsx","../../src/form/select/Select.tsx"],"sourcesContent":["import {useControlledState as $bOkae$useControlledState} from \"@react-stately/utils\";\n\n\nfunction $3017fa7ffdddec74$export$8042c6c013fd5226(props = {\n}) {\n    let { isReadOnly: isReadOnly  } = props;\n    // have to provide an empty function so useControlledState doesn't throw a fit\n    // can't use useControlledState's prop calling because we need the event object from the change\n    let [isSelected, setSelected] = $bOkae$useControlledState(props.isSelected, props.defaultSelected || false, props.onChange);\n    function updateSelected(value) {\n        if (!isReadOnly) setSelected(value);\n    }\n    function toggleState() {\n        if (!isReadOnly) setSelected(!isSelected);\n    }\n    return {\n        isSelected: isSelected,\n        setSelected: updateSelected,\n        toggle: toggleState\n    };\n}\n\n\n\n\nexport {$3017fa7ffdddec74$export$8042c6c013fd5226 as useToggleState};\n//# sourceMappingURL=module.js.map\n","import {mergeProps as $7CUUz$mergeProps, filterDOMProps as $7CUUz$filterDOMProps} from \"@react-aria/utils\";\nimport {useFocusable as $7CUUz$useFocusable} from \"@react-aria/focus\";\nimport {usePress as $7CUUz$usePress} from \"@react-aria/interactions\";\n\n\n\n\nfunction $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {\n    let { isDisabled: isDisabled = false , isRequired: isRequired , isReadOnly: isReadOnly , value: value , name: name , children: children , 'aria-label': ariaLabel , 'aria-labelledby': ariaLabelledby , validationState: validationState = 'valid'  } = props;\n    let onChange = (e)=>{\n        // since we spread props on label, onChange will end up there as well as in here.\n        // so we have to stop propagation at the lowest level that we care about\n        e.stopPropagation();\n        state.setSelected(e.target.checked);\n    };\n    let hasChildren = children != null;\n    let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n    if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n    // This handles focusing the input on pointer down, which Safari does not do by default.\n    let { pressProps: pressProps  } = $7CUUz$usePress({\n        isDisabled: isDisabled\n    });\n    let { focusableProps: focusableProps  } = $7CUUz$useFocusable(props, ref);\n    let interactions = $7CUUz$mergeProps(pressProps, focusableProps);\n    let domProps = $7CUUz$filterDOMProps(props, {\n        labelable: true\n    });\n    return {\n        inputProps: $7CUUz$mergeProps(domProps, {\n            'aria-invalid': validationState === 'invalid' || undefined,\n            'aria-errormessage': props['aria-errormessage'],\n            'aria-controls': props['aria-controls'],\n            'aria-readonly': isReadOnly || undefined,\n            'aria-required': isRequired || undefined,\n            onChange: onChange,\n            disabled: isDisabled,\n            value: value,\n            name: name,\n            type: 'checkbox',\n            ...interactions\n        })\n    };\n}\n\n\n\n\nexport {$d2c8e2b0480f3f34$export$cbe85ee05b554577 as useToggle};\n//# sourceMappingURL=module.js.map\n","import {useEffect as $cKEhs$useEffect} from \"react\";\nimport {useToggle as $cKEhs$useToggle} from \"@react-aria/toggle\";\nimport {filterDOMProps as $cKEhs$filterDOMProps, mergeProps as $cKEhs$mergeProps} from \"@react-aria/utils\";\nimport {useLabel as $cKEhs$useLabel} from \"@react-aria/label\";\nimport {useToggleState as $cKEhs$useToggleState} from \"@react-stately/toggle\";\n\n\n\nfunction $406796ff087fe49b$export$e375f10ce42261c5(props, state, inputRef) {\n    let { inputProps: inputProps  } = $cKEhs$useToggle(props, state, inputRef);\n    let { isSelected: isSelected  } = state;\n    let { isIndeterminate: isIndeterminate  } = props;\n    $cKEhs$useEffect(()=>{\n        // indeterminate is a property, but it can only be set via javascript\n        // https://css-tricks.com/indeterminate-checkboxes/\n        if (inputRef.current) inputRef.current.indeterminate = isIndeterminate;\n    });\n    return {\n        inputProps: {\n            ...inputProps,\n            checked: isSelected,\n            'aria-checked': isIndeterminate ? 'mixed' : isSelected\n        }\n    };\n}\n\n\nconst $1ae600c947479353$export$31440636951aa68c = new WeakMap();\n\n\n\n\nfunction $1e9fce0cfacc738b$export$49ff6f28c54f1cbe(props, state) {\n    let { isDisabled: isDisabled , name: name  } = props;\n    let { labelProps: labelProps , fieldProps: fieldProps  } = $cKEhs$useLabel({\n        ...props,\n        // Checkbox group is not an HTML input element so it\n        // shouldn't be labeled by a <label> element.\n        labelElementType: 'span'\n    });\n    let domProps = $cKEhs$filterDOMProps(props, {\n        labelable: true\n    });\n    // Pass name prop from group to all items by attaching to the state.\n    $1ae600c947479353$export$31440636951aa68c.set(state, name);\n    return {\n        groupProps: $cKEhs$mergeProps(domProps, {\n            role: 'group',\n            'aria-disabled': isDisabled || undefined,\n            ...fieldProps\n        }),\n        labelProps: labelProps\n    };\n}\n\n\n\n\n\nfunction $fba3e38d5ca8983f$export$353b32fc6898d37d(props, state, inputRef) {\n    const toggleState = $cKEhs$useToggleState({\n        isReadOnly: props.isReadOnly || state.isReadOnly,\n        isSelected: state.isSelected(props.value),\n        onChange (isSelected) {\n            if (isSelected) state.addValue(props.value);\n            else state.removeValue(props.value);\n            if (props.onChange) props.onChange(isSelected);\n        }\n    });\n    let { inputProps: inputProps  } = $406796ff087fe49b$export$e375f10ce42261c5({\n        ...props,\n        isReadOnly: props.isReadOnly || state.isReadOnly,\n        isDisabled: props.isDisabled || state.isDisabled,\n        name: props.name || $1ae600c947479353$export$31440636951aa68c.get(state)\n    }, toggleState, inputRef);\n    return {\n        inputProps: inputProps\n    };\n}\n\n\n\n\nexport {$406796ff087fe49b$export$e375f10ce42261c5 as useCheckbox, $1e9fce0cfacc738b$export$49ff6f28c54f1cbe as useCheckboxGroup, $fba3e38d5ca8983f$export$353b32fc6898d37d as useCheckboxGroupItem};\n//# sourceMappingURL=module.js.map\n","import * as React from 'react';\nimport type { ToggleProps } from '@react-types/checkbox';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { useFocusRing } from '@react-aria/focus';\nimport { useToggleState } from '@react-stately/toggle';\nimport { useCheckbox } from '@react-aria/checkbox';\nimport clsx from 'clsx';\n\nimport styles from './Checkbox.module.scss';\n\nexport type CheckboxProps = {\n  featureColor?: [red: number, green: number, blue: number];\n\n  className?: string;\n  style?: React.CSSProperties;\n\n  children?: React.ReactNode;\n} & ToggleProps &\n  React.AriaAttributes;\n\nexport const Checkbox = React.memo<CheckboxProps>(\n  ({ style, className, featureColor, ...props }) => {\n    const customStyle =\n      featureColor &&\n      ({\n        '--control-indicator-color': featureColor.join(', '),\n      } as React.CSSProperties);\n\n    const ref = React.useRef() as React.MutableRefObject<HTMLInputElement>;\n    const state = useToggleState(props);\n    const { inputProps } = useCheckbox(props, state, ref);\n    const { isFocusVisible, focusProps } = useFocusRing();\n\n    return (\n      <label\n        style={{ ...style, ...customStyle }}\n        className={clsx(className, styles.root)}\n      >\n        <VisuallyHidden>\n          <input\n            {...inputProps}\n            {...focusProps}\n            ref={ref}\n            className={clsx(className, styles.input)}\n          />\n        </VisuallyHidden>\n        <div\n          className={clsx(styles.controlIndicator, {\n            [styles.isSelected]: state.isSelected,\n            [styles.isFocusVisible]: isFocusVisible,\n            [styles.isDisabled]: props.isDisabled,\n          })}\n        />\n        {props.children}\n      </label>\n    );\n  }\n);\nCheckbox.displayName = 'Checkbox';\n","import * as React from 'react';\nimport clsx from 'clsx';\n\nimport styles from './radio.module.scss';\n\nexport type RadioProps = {\n  label?: string;\n  featureColor?: [red: number, green: number, blue: number];\n} & React.HTMLProps<HTMLElement>;\n\nexport const Radio = React.forwardRef<any, RadioProps>(\n  ({ children, label, className, featureColor, ...props }, ref) => {\n    const customStyle =\n      featureColor &&\n      ({\n        '--control-indicator-color': featureColor.join(', '),\n      } as React.CSSProperties);\n    return (\n      <label style={customStyle} className={styles.root}>\n        {label}\n        {children}\n        <input\n          {...props}\n          ref={ref}\n          aria-label={\n            props['aria-label'] ||\n            (!props['aria-labelledby'] ? label : undefined)\n          }\n          className={clsx(className, styles.root)}\n          type={'radio'}\n        />\n        <div className={styles.controlIndicator} />\n      </label>\n    );\n  }\n);\nRadio.displayName = 'Radio';\n","import * as React from 'react';\nimport { RadioProps } from './Radio';\n\nexport type RadioGroupProps = {\n  name: string;\n  value?: RadioProps['value'];\n  onChange?: (\n    _event: React.ChangeEvent<HTMLInputElement>,\n    _value: string\n  ) => void;\n  children?: React.ReactElement<RadioProps>[];\n} & Omit<React.HTMLProps<HTMLDivElement>, 'value' | 'onChange'>;\n\nexport const RadioGroup = React.forwardRef<any, RadioGroupProps>(\n  ({ children, className, name, value, onChange, ...props }, ref) => {\n    const onChangeInput = (\n      e: React.ChangeEvent<HTMLInputElement>,\n      p: RadioProps\n    ) => {\n      if (\n        (p.onChange?.(e) as any) !== false &&\n        !e.isDefaultPrevented() &&\n        e.target.name === name\n      ) {\n        onChange?.(e, e.target.value);\n      }\n    };\n    return (\n      <div ref={ref} role={'radiogroup'} {...props} className={className}>\n        {React.Children.map(children as any, (child: React.ReactElement) => {\n          const props: RadioProps = child.props;\n          return React.cloneElement(child, {\n            name,\n            onChange: (e: any) => onChangeInput(e, props),\n            checked: props.checked ?? props.value === value,\n          });\n        })}\n      </div>\n    );\n  }\n);\nRadioGroup.displayName = 'RadioGroup';\n","import * as React from 'react';\nimport clsx from 'clsx';\n\nimport styles from './select.module.scss';\n\nexport type SelectProps = {} & React.HTMLProps<HTMLSelectElement>;\n\nexport const Select = React.forwardRef<any, SelectProps>(\n  ({ children, className, ...props }, ref) => (\n    <select {...props} ref={ref} className={clsx(className, styles.root)}>\n      {children}\n    </select>\n  )\n);\nSelect.displayName = 'Select';\n"],"names":["$3017fa7ffdddec74$export$8042c6c013fd5226","props","isReadOnly","isSelected","setSelected","$bOkae$useControlledState","updateSelected","value","toggleState","$d2c8e2b0480f3f34$export$cbe85ee05b554577","state","ref","isDisabled","isRequired","name","children","ariaLabel","ariaLabelledby","validationState","onChange","e","hasChildren","hasAriaLabel","pressProps","$7CUUz$usePress","focusableProps","$7CUUz$useFocusable","interactions","$7CUUz$mergeProps","domProps","$7CUUz$filterDOMProps","$406796ff087fe49b$export$e375f10ce42261c5","inputRef","inputProps","$cKEhs$useToggle","isIndeterminate","$cKEhs$useEffect","Checkbox","React.memo","style","className","featureColor","customStyle","React.useRef","useToggleState","isFocusVisible","focusProps","_jsxs","clsx","styles","_jsx","VisuallyHidden","Radio","React.forwardRef","label","root","undefined","controlIndicator","RadioGroup","onChangeInput","p","_a","React.Children","child","props2","React.cloneElement","Select"],"mappings":"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"}