{"version":3,"file":"Message.stories.2dd7d7d6.js","sources":["../../src/message/Message.tsx","../../src/message/ErrorMessage.tsx","../../src/message/SuccessMessage.tsx"],"sourcesContent":["import * as React from 'react';\nimport { motion } from 'framer-motion';\nimport clsx from 'clsx';\n\nimport styles from './Message.module.scss';\n\nexport interface MessageProps extends React.HTMLProps<HTMLDivElement> {\n  message?: string | null;\n  color: string;\n  className?: string;\n  children?: any;\n}\n\nexport const Message = React.memo<MessageProps>(\n  ({ message, color, className, children, ...otherProps }) => {\n    const otherStyle: React.CSSProperties = {\n      backgroundColor: `color(${color} saturation(-30))`,\n      borderColor: color,\n    };\n\n    return (\n      <motion.div\n        role={'alert'}\n        aria-label={message || undefined}\n        style={otherStyle}\n        className={clsx(styles.root, className)}\n        variants={{\n          visible: { opacity: 1, height: 'auto' },\n          hidden: { opacity: 0, height: 0 },\n        }}\n        animate={message ? 'visible' : 'hidden'}\n        {...(otherProps as any)}\n      >\n        {message}\n        {children}\n      </motion.div>\n    );\n  }\n);\nMessage.displayName = 'Message';\n","import * as React from 'react';\nimport { Message } from './Message';\n\nexport interface ErrorMessageProps {\n  error?: Error | string | null;\n  className?: string;\n  children?: any;\n}\n\nexport const ErrorMessage = React.memo<ErrorMessageProps>(\n  ({ error, className, children }) => {\n    const errorMessage = React.useMemo(() => {\n      const errorMessage = typeof error === 'string' ? error : error?.message;\n      if (errorMessage) {\n        return errorMessage.replace(/^GraphQL error: /, '');\n      }\n    }, [error]);\n    if (!(children || errorMessage)) {\n      return null;\n    }\n\n    const color =\n      'rgb(' +\n      getComputedStyle(document.documentElement).getPropertyValue(\n        '--lotta-error-color'\n      ) +\n      ')';\n\n    return (\n      <Message\n        role={'alert'}\n        color={color}\n        message={errorMessage}\n        className={className}\n      >\n        {children}\n      </Message>\n    );\n  }\n);\nErrorMessage.displayName = 'ErrorMessage';\n","import * as React from 'react';\nimport { Message } from './Message';\n\nexport interface SuccessMessageProps {\n  message?: string;\n  className?: string;\n}\n\nexport const SuccessMessage = React.memo<SuccessMessageProps>(\n  ({ message, className }) => {\n    const color =\n      'rgb(' +\n      getComputedStyle(document.documentElement).getPropertyValue(\n        '--lotta-success-color'\n      ) +\n      ')';\n\n    return <Message color={color} message={message} className={className} />;\n  }\n);\nSuccessMessage.displayName = 'SuccessMessage';\n"],"names":["React.memo","message","color","className","children","otherProps","_jsxs","undefined","otherStyle","Message","error","React.useMemo","_jsx","errorMessage","ErrorMessage","SuccessMessage"],"mappings":"sNAaO,KAAA,GAAAA,EAAA,QAAA,KAAA,CAAA,CACJ,UAAEC,QAASC,YAAOC,cAAWC,KAAaC,CACzC,KAAA,GAAA,CAAwC,gBAAA,SAAA,qBACZH,YAAAA,CACbA,EAGf,MAAAI,GAAA,EAAA,IAAA,CACE,KAAA,QACQ,aAAA,GAAA,OACiBC,MAAAA,EAChBC,UAAAA,EAAAA,EAAAA,KAAAA,CAAAA,EACQ,SAAA,CACL,QAAA,CACC,QAAA,EAAW,OAAA,MAAW,EAAtB,OAAA,CACD,QAAA,EAAW,OAAA,CAAW,CAAtB,EAFA,QAAA,EAAA,UAAA,SAIqB,GAAA,EAC1BH,SAAAA,CAAAA,EAAAA,CAAAA,CAVP,CAAA,CAgBH,CAAA,EAEHI,EAAAA,YAAAA,+jBC9BO,KAAA,GAAAT,EAAA,QAAA,KAAA,CAAA,CACJ,QAAEU,YAAOP,cAAWC,CACnB,KAAA,GAAAO,EAAAA,QAAAA,QAAA,IAAA,CACE,KAAA,GAAA,MAAA,IAAA,SAAA,EAAA,iBAAA,QACA,GAAA,EACE,MAAA,GAAA,QAAA,mBAAA,EAAA,CACD,EAAA,CAAA,CAAA,CAAA,EAEH,GAAA,CAAA,IAAA,GACE,MAAA,MAGF,KAAA,GAAA,OAAA,iBAAA,SAAA,eAAA,EAAA,iBAAA,qBAAA,EAAA,IAOA,MAAAC,GAAA,EAAA,CACE,KAAA,QACQ,QACN,QAAA,EACSC,YACT,UAJF,CAAA,CASH,CAAA,EAEHC,EAAAA,YAAAA,ohBChCO,KAAA,GAAAd,EAAA,QAAA,KAAA,CAAA,CACJ,UAAEC,eAASE,CACV,KAAA,GAAA,OAAA,iBAAA,SAAA,eAAA,EAAA,iBAAA,uBAAA,EAAA,IAOA,MAAAS,GAAA,EAAA,CAAO,QAAS,UAAc,WAAkB,CAAA,CACjD,CAAA,EAEHG,EAAAA,YAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}