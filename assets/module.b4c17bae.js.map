{"version":3,"file":"module.b4c17bae.js","sources":["../../node_modules/@react-aria/interactions/dist/module.js"],"sourcesContent":["import {mergeProps as $bx7SL$mergeProps, useSyncRef as $bx7SL$useSyncRef, useGlobalListeners as $bx7SL$useGlobalListeners, focusWithoutScrolling as $bx7SL$focusWithoutScrolling, isIOS as $bx7SL$isIOS, runAfterTransition as $bx7SL$runAfterTransition, useLayoutEffect as $bx7SL$useLayoutEffect, isMac as $bx7SL$isMac, useEvent as $bx7SL$useEvent, useDescription as $bx7SL$useDescription} from \"@react-aria/utils\";\nimport $bx7SL$react, {useRef as $bx7SL$useRef, useContext as $bx7SL$useContext, useState as $bx7SL$useState, useMemo as $bx7SL$useMemo, useEffect as $bx7SL$useEffect, useCallback as $bx7SL$useCallback} from \"react\";\n\n\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet $14c0b72509d70225$var$state = 'default';\nlet $14c0b72509d70225$var$savedUserSelect = '';\nlet $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n    if ($bx7SL$isIOS()) {\n        if ($14c0b72509d70225$var$state === 'default') {\n            $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n            document.documentElement.style.webkitUserSelect = 'none';\n        }\n        $14c0b72509d70225$var$state = 'disabled';\n    } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n        // If not iOS, store the target's original user-select and change to user-select: none\n        // Ignore state since it doesn't apply for non iOS\n        $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);\n        target.style.userSelect = 'none';\n    }\n}\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n    if ($bx7SL$isIOS()) {\n        // If the state is already default, there's nothing to do.\n        // If it is restoring, then there's no need to queue a second restore.\n        if ($14c0b72509d70225$var$state !== 'disabled') return;\n        $14c0b72509d70225$var$state = 'restoring';\n        // There appears to be a delay on iOS where selection still might occur\n        // after pointer up, so wait a bit before removing user-select.\n        setTimeout(()=>{\n            // Wait for any CSS transitions to complete so we don't recompute style\n            // for the whole page in the middle of the animation and cause jank.\n            $bx7SL$runAfterTransition(()=>{\n                // Avoid race conditions\n                if ($14c0b72509d70225$var$state === 'restoring') {\n                    if (document.documentElement.style.webkitUserSelect === 'none') document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || '';\n                    $14c0b72509d70225$var$savedUserSelect = '';\n                    $14c0b72509d70225$var$state = 'default';\n                }\n            });\n        }, 300);\n    } else if (target instanceof HTMLElement || target instanceof SVGElement) // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    {\n        if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n            let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n            if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;\n            if (target.getAttribute('style') === '') target.removeAttribute('style');\n            $14c0b72509d70225$var$modifiedElementMap.delete(target);\n        }\n    }\n}\n\n\n\n\n\nfunction $8a9cb279dc87e130$export$60278871457622de(event) {\n    // JAWS/NVDA with Firefox.\n    if (event.mozInputSource === 0 && event.isTrusted) return true;\n    return event.detail === 0 && !event.pointerType;\n}\nclass $8a9cb279dc87e130$export$905e7fc544a71f36 {\n    isDefaultPrevented() {\n        return this.nativeEvent.defaultPrevented;\n    }\n    preventDefault() {\n        this.defaultPrevented = true;\n        this.nativeEvent.preventDefault();\n    }\n    stopPropagation() {\n        this.nativeEvent.stopPropagation();\n        this.isPropagationStopped = ()=>true\n        ;\n    }\n    isPropagationStopped() {\n        return false;\n    }\n    persist() {\n    }\n    constructor(type, nativeEvent){\n        this.nativeEvent = nativeEvent;\n        this.target = nativeEvent.target;\n        this.currentTarget = nativeEvent.currentTarget;\n        this.relatedTarget = nativeEvent.relatedTarget;\n        this.bubbles = nativeEvent.bubbles;\n        this.cancelable = nativeEvent.cancelable;\n        this.defaultPrevented = nativeEvent.defaultPrevented;\n        this.eventPhase = nativeEvent.eventPhase;\n        this.isTrusted = nativeEvent.isTrusted;\n        this.timeStamp = nativeEvent.timeStamp;\n        this.type = type;\n    }\n}\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n    let stateRef = $bx7SL$useRef({\n        isFocused: false,\n        onBlur: onBlur,\n        observer: null\n    });\n    stateRef.current.onBlur = onBlur;\n    // Clean up MutationObserver on unmount. See below.\n    // eslint-disable-next-line arrow-body-style\n    $bx7SL$useLayoutEffect(()=>{\n        const state = stateRef.current;\n        return ()=>{\n            if (state.observer) {\n                state.observer.disconnect();\n                state.observer = null;\n            }\n        };\n    }, []);\n    // This function is called during a React onFocus event.\n    return $bx7SL$useCallback((e1)=>{\n        // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n        // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n        // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n        // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n        if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {\n            stateRef.current.isFocused = true;\n            let target = e1.target;\n            let onBlurHandler = (e)=>{\n                var // For backward compatibility, dispatch a (fake) React synthetic event.\n                _current, ref;\n                stateRef.current.isFocused = false;\n                if (target.disabled) (ref = (_current = stateRef.current).onBlur) === null || ref === void 0 ? void 0 : ref.call(_current, new $8a9cb279dc87e130$export$905e7fc544a71f36('blur', e));\n                // We no longer need the MutationObserver once the target is blurred.\n                if (stateRef.current.observer) {\n                    stateRef.current.observer.disconnect();\n                    stateRef.current.observer = null;\n                }\n            };\n            target.addEventListener('focusout', onBlurHandler, {\n                once: true\n            });\n            stateRef.current.observer = new MutationObserver(()=>{\n                if (stateRef.current.isFocused && target.disabled) {\n                    stateRef.current.observer.disconnect();\n                    target.dispatchEvent(new FocusEvent('blur'));\n                    target.dispatchEvent(new FocusEvent('focusout', {\n                        bubbles: true\n                    }));\n                }\n            });\n            stateRef.current.observer.observe(target, {\n                attributes: true,\n                attributeFilter: [\n                    'disabled'\n                ]\n            });\n        }\n    }, []);\n}\n\n\n\nconst $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = $bx7SL$react.createContext(null);\n$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = 'PressResponderContext';\n\n\n\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n    // Consume context from <PressResponder> and merge with props.\n    let context = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n    if (context) {\n        let { register: register , ...contextProps } = context;\n        props = $bx7SL$mergeProps(contextProps, props);\n        register();\n    }\n    $bx7SL$useSyncRef(context, props.ref);\n    return props;\n}\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n    let { onPress: onPress1 , onPressChange: onPressChange1 , onPressStart: onPressStart1 , onPressEnd: onPressEnd1 , onPressUp: onPressUp1 , isDisabled: isDisabled1 , isPressed: isPressedProp , preventFocusOnPress: preventFocusOnPress , shouldCancelOnPointerExit: shouldCancelOnPointerExit , allowTextSelectionOnPress: allowTextSelectionOnPress , // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _ , ...domProps } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n    let propsRef = $bx7SL$useRef(null);\n    propsRef.current = {\n        onPress: onPress1,\n        onPressChange: onPressChange1,\n        onPressStart: onPressStart1,\n        onPressEnd: onPressEnd1,\n        onPressUp: onPressUp1,\n        isDisabled: isDisabled1,\n        shouldCancelOnPointerExit: shouldCancelOnPointerExit\n    };\n    let [isPressed, setPressed] = $bx7SL$useState(false);\n    let ref = $bx7SL$useRef({\n        isPressed: false,\n        ignoreEmulatedMouseEvents: false,\n        ignoreClickAfterPress: false,\n        didFirePressStart: false,\n        activePointerId: null,\n        target: null,\n        isOverTarget: false,\n        pointerType: null\n    });\n    let { addGlobalListener: addGlobalListener , removeAllGlobalListeners: removeAllGlobalListeners  } = $bx7SL$useGlobalListeners();\n    let pressProps1 = $bx7SL$useMemo(()=>{\n        let state = ref.current;\n        let triggerPressStart = (originalEvent, pointerType)=>{\n            let { onPressStart: onPressStart , onPressChange: onPressChange , isDisabled: isDisabled  } = propsRef.current;\n            if (isDisabled || state.didFirePressStart) return;\n            if (onPressStart) onPressStart({\n                type: 'pressstart',\n                pointerType: pointerType,\n                target: originalEvent.currentTarget,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n            if (onPressChange) onPressChange(true);\n            state.didFirePressStart = true;\n            setPressed(true);\n        };\n        let triggerPressEnd = (originalEvent, pointerType, wasPressed = true)=>{\n            let { onPressEnd: onPressEnd , onPressChange: onPressChange , onPress: onPress , isDisabled: isDisabled  } = propsRef.current;\n            if (!state.didFirePressStart) return;\n            state.ignoreClickAfterPress = true;\n            state.didFirePressStart = false;\n            if (onPressEnd) onPressEnd({\n                type: 'pressend',\n                pointerType: pointerType,\n                target: originalEvent.currentTarget,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n            if (onPressChange) onPressChange(false);\n            setPressed(false);\n            if (onPress && wasPressed && !isDisabled) onPress({\n                type: 'press',\n                pointerType: pointerType,\n                target: originalEvent.currentTarget,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n        };\n        let triggerPressUp = (originalEvent, pointerType)=>{\n            let { onPressUp: onPressUp , isDisabled: isDisabled  } = propsRef.current;\n            if (isDisabled) return;\n            if (onPressUp) onPressUp({\n                type: 'pressup',\n                pointerType: pointerType,\n                target: originalEvent.currentTarget,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n        };\n        let cancel = (e)=>{\n            if (state.isPressed) {\n                if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                state.isPressed = false;\n                state.isOverTarget = false;\n                state.activePointerId = null;\n                state.pointerType = null;\n                removeAllGlobalListeners();\n                if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n            }\n        };\n        let pressProps = {\n            onKeyDown (e) {\n                if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target)) {\n                    if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();\n                    e.stopPropagation();\n                    // If the event is repeating, it may have started on a different element\n                    // after which focus moved to the current element. Ignore these events and\n                    // only handle the first key down event.\n                    if (!state.isPressed && !e.repeat) {\n                        state.target = e.currentTarget;\n                        state.isPressed = true;\n                        triggerPressStart(e, 'keyboard');\n                        // Focus may move before the key up event, so register the event on the document\n                        // instead of the same element where the key down event occurred.\n                        addGlobalListener(document, 'keyup', onKeyUp, false);\n                    }\n                }\n            },\n            onKeyUp (e) {\n                if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');\n            },\n            onClick (e) {\n                if (e && !e.currentTarget.contains(e.target)) return;\n                if (e && e.button === 0) {\n                    e.stopPropagation();\n                    if (isDisabled1) e.preventDefault();\n                    // If triggered from a screen reader or by using element.click(),\n                    // trigger as if it were a keyboard click.\n                    if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || $8a9cb279dc87e130$export$60278871457622de(e.nativeEvent))) {\n                        // Ensure the element receives focus (VoiceOver on iOS does not do this)\n                        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n                        triggerPressStart(e, 'virtual');\n                        triggerPressUp(e, 'virtual');\n                        triggerPressEnd(e, 'virtual');\n                    }\n                    state.ignoreEmulatedMouseEvents = false;\n                    state.ignoreClickAfterPress = false;\n                }\n            }\n        };\n        let onKeyUp = (e)=>{\n            if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e)) {\n                if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();\n                e.stopPropagation();\n                state.isPressed = false;\n                let target = e.target;\n                triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));\n                removeAllGlobalListeners();\n                // If the target is a link, trigger the click method to open the URL,\n                // but defer triggering pressEnd until onClick event handler.\n                if (state.target instanceof HTMLElement && (state.target.contains(target) && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link')) state.target.click();\n            }\n        };\n        if (typeof PointerEvent !== 'undefined') {\n            pressProps.onPointerDown = (e)=>{\n                // Only handle left clicks, and ignore events that bubbled through portals.\n                if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n                // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n                // Ignore and let the onClick handler take care of it instead.\n                // https://bugs.webkit.org/show_bug.cgi?id=222627\n                // https://bugs.webkit.org/show_bug.cgi?id=223202\n                if ($f6c31cce2adf654f$var$isVirtualPointerEvent(e.nativeEvent)) {\n                    state.pointerType = 'virtual';\n                    return;\n                }\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent\n                // default on pointer down and handle focusing the pressable element ourselves.\n                if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                state.pointerType = e.pointerType;\n                e.stopPropagation();\n                if (!state.isPressed) {\n                    state.isPressed = true;\n                    state.isOverTarget = true;\n                    state.activePointerId = e.pointerId;\n                    state.target = e.currentTarget;\n                    if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n                    if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n                    triggerPressStart(e, state.pointerType);\n                    addGlobalListener(document, 'pointermove', onPointerMove, false);\n                    addGlobalListener(document, 'pointerup', onPointerUp, false);\n                    addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n                }\n            };\n            pressProps.onMouseDown = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                if (e.button === 0) {\n                    // Chrome and Firefox on touch Windows devices require mouse down events\n                    // to be canceled in addition to pointer events, or an extra asynchronous\n                    // focus event will be fired.\n                    if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                    e.stopPropagation();\n                }\n            };\n            pressProps.onPointerUp = (e)=>{\n                // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n                if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return;\n                // Only handle left clicks\n                // Safari on iOS sometimes fires pointerup events, even\n                // when the touch isn't over the target, so double check.\n                if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n            };\n            // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n            // Use pointer move events instead to implement our own hit testing.\n            // See https://bugs.webkit.org/show_bug.cgi?id=199803\n            let onPointerMove = (e)=>{\n                if (e.pointerId !== state.activePointerId) return;\n                if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n                    if (!state.isOverTarget) {\n                        state.isOverTarget = true;\n                        triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                    }\n                } else if (state.isOverTarget) {\n                    state.isOverTarget = false;\n                    triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                    if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n                }\n            };\n            let onPointerUp = (e)=>{\n                if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n                    if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                    else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                    state.isPressed = false;\n                    state.isOverTarget = false;\n                    state.activePointerId = null;\n                    state.pointerType = null;\n                    removeAllGlobalListeners();\n                    if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n                }\n            };\n            let onPointerCancel = (e)=>{\n                cancel(e);\n            };\n            pressProps.onDragStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n                cancel(e);\n            };\n        } else {\n            pressProps.onMouseDown = (e)=>{\n                // Only handle left clicks\n                if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent\n                // default on mouse down and handle focusing the pressable element ourselves.\n                if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                e.stopPropagation();\n                if (state.ignoreEmulatedMouseEvents) return;\n                state.isPressed = true;\n                state.isOverTarget = true;\n                state.target = e.currentTarget;\n                state.pointerType = $8a9cb279dc87e130$export$60278871457622de(e.nativeEvent) ? 'virtual' : 'mouse';\n                if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n                triggerPressStart(e, state.pointerType);\n                addGlobalListener(document, 'mouseup', onMouseUp, false);\n            };\n            pressProps.onMouseEnter = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n                    state.isOverTarget = true;\n                    triggerPressStart(e, state.pointerType);\n                }\n            };\n            pressProps.onMouseLeave = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n                    state.isOverTarget = false;\n                    triggerPressEnd(e, state.pointerType, false);\n                    if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n                }\n            };\n            pressProps.onMouseUp = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);\n            };\n            let onMouseUp = (e)=>{\n                // Only handle left clicks\n                if (e.button !== 0) return;\n                state.isPressed = false;\n                removeAllGlobalListeners();\n                if (state.ignoreEmulatedMouseEvents) {\n                    state.ignoreEmulatedMouseEvents = false;\n                    return;\n                }\n                if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                state.isOverTarget = false;\n            };\n            pressProps.onTouchStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n                if (!touch) return;\n                state.activePointerId = touch.identifier;\n                state.ignoreEmulatedMouseEvents = true;\n                state.isOverTarget = true;\n                state.isPressed = true;\n                state.target = e.currentTarget;\n                state.pointerType = 'touch';\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n                // on the emulated mouse event and handle focusing the pressable element ourselves.\n                if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n                if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n                triggerPressStart(e, state.pointerType);\n                addGlobalListener(window, 'scroll', onScroll, true);\n            };\n            pressProps.onTouchMove = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (!state.isPressed) return;\n                let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n                if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n                    if (!state.isOverTarget) {\n                        state.isOverTarget = true;\n                        triggerPressStart(e, state.pointerType);\n                    }\n                } else if (state.isOverTarget) {\n                    state.isOverTarget = false;\n                    triggerPressEnd(e, state.pointerType, false);\n                    if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n                }\n            };\n            pressProps.onTouchEnd = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (!state.isPressed) return;\n                let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n                if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n                    triggerPressUp(e, state.pointerType);\n                    triggerPressEnd(e, state.pointerType);\n                } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);\n                state.isPressed = false;\n                state.activePointerId = null;\n                state.isOverTarget = false;\n                state.ignoreEmulatedMouseEvents = true;\n                if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n                removeAllGlobalListeners();\n            };\n            pressProps.onTouchCancel = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (state.isPressed) cancel(e);\n            };\n            let onScroll = (e)=>{\n                if (state.isPressed && e.target.contains(state.target)) cancel({\n                    currentTarget: state.target,\n                    shiftKey: false,\n                    ctrlKey: false,\n                    metaKey: false,\n                    altKey: false\n                });\n            };\n            pressProps.onDragStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                cancel(e);\n            };\n        }\n        return pressProps;\n    }, [\n        addGlobalListener,\n        isDisabled1,\n        preventFocusOnPress,\n        removeAllGlobalListeners,\n        allowTextSelectionOnPress\n    ]);\n    // Remove user-select: none in case component unmounts immediately after pressStart\n    // eslint-disable-next-line arrow-body-style\n    $bx7SL$useEffect(()=>{\n        return ()=>{\n            if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);\n        };\n    }, [\n        allowTextSelectionOnPress\n    ]);\n    return {\n        isPressed: isPressedProp || isPressed,\n        pressProps: $bx7SL$mergeProps(domProps, pressProps1)\n    };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n    return target.tagName === 'A' && target.hasAttribute('href');\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event) {\n    const { key: key , code: code , target: target  } = event;\n    const element = target;\n    const { tagName: tagName , isContentEditable: isContentEditable  } = element;\n    const role = element.getAttribute('role');\n    // Accessibility for keyboards. Space and Enter only.\n    // \"Spacebar\" is for IE 11\n    return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && tagName !== 'INPUT' && tagName !== 'TEXTAREA' && isContentEditable !== true && (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') && // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter');\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n    const { targetTouches: targetTouches  } = event;\n    if (targetTouches.length > 0) return targetTouches[0];\n    return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n    const changedTouches = event.changedTouches;\n    for(let i = 0; i < changedTouches.length; i++){\n        const touch = changedTouches[i];\n        if (touch.identifier === pointerId) return touch;\n    }\n    return null;\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n    return {\n        currentTarget: target,\n        shiftKey: e.shiftKey,\n        ctrlKey: e.ctrlKey,\n        metaKey: e.metaKey,\n        altKey: e.altKey\n    };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n    let offsetX = point.width / 2 || point.radiusX || 0;\n    let offsetY = point.height / 2 || point.radiusY || 0;\n    return {\n        top: point.clientY - offsetY,\n        right: point.clientX + offsetX,\n        bottom: point.clientY + offsetY,\n        left: point.clientX - offsetX\n    };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n    // check if they cannot overlap on x axis\n    if (a.left > b.right || b.left > a.right) return false;\n    // check if they cannot overlap on y axis\n    if (a.top > b.bottom || b.top > a.bottom) return false;\n    return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n    let rect = target.getBoundingClientRect();\n    let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n    return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n    // We cannot prevent default if the target is a draggable element.\n    return !(target instanceof HTMLElement) || !target.draggable;\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target) {\n    return !((target.tagName === 'INPUT' || target.tagName === 'BUTTON') && target.type === 'submit');\n}\nfunction $f6c31cce2adf654f$var$isVirtualPointerEvent(event) {\n    // If the pointer size is zero, then we assume it's from a screen reader.\n    // Android TalkBack double tap will sometimes return a event with width and height of 1\n    // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n    // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n    // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush\n    // Talkback double tap from Windows Firefox touch screen press\n    return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'mouse';\n}\n\n\n\nconst $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/ $bx7SL$react.forwardRef(({ children: children , ...props }, ref)=>{\n    let newRef = $bx7SL$useRef();\n    ref = ref !== null && ref !== void 0 ? ref : newRef;\n    let { pressProps: pressProps  } = $f6c31cce2adf654f$export$45712eceda6fad21({\n        ...props,\n        ref: ref\n    });\n    let child = $bx7SL$react.Children.only(children);\n    return(/*#__PURE__*/ $bx7SL$react.cloneElement(child, // @ts-ignore\n    {\n        ref: ref,\n        ...$bx7SL$mergeProps(child.props, pressProps)\n    }));\n});\n\n\n\n\n\nconst $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/ $bx7SL$react.forwardRef(({ children: children , ...props }, ref)=>{\n    let isRegistered = $bx7SL$useRef(false);\n    let prevContext = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n    let context = $bx7SL$mergeProps(prevContext || {\n    }, {\n        ...props,\n        ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n        register () {\n            isRegistered.current = true;\n            if (prevContext) prevContext.register();\n        }\n    });\n    $bx7SL$useSyncRef(prevContext, ref);\n    $bx7SL$useEffect(()=>{\n        if (!isRegistered.current) console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n    }, []);\n    return(/*#__PURE__*/ $bx7SL$react.createElement($ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {\n        value: context\n    }, children));\n});\n\n\n\n\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n    let { isDisabled: isDisabled , onFocus: onFocusProp , onBlur: onBlurProp , onFocusChange: onFocusChange  } = props;\n    const onBlur = $bx7SL$useCallback((e)=>{\n        if (e.target === e.currentTarget) {\n            if (onBlurProp) onBlurProp(e);\n            if (onFocusChange) onFocusChange(false);\n            return true;\n        }\n    }, [\n        onBlurProp,\n        onFocusChange\n    ]);\n    const onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n    const onFocus = $bx7SL$useCallback((e)=>{\n        if (e.target === e.currentTarget) {\n            if (onFocusProp) onFocusProp(e);\n            if (onFocusChange) onFocusChange(true);\n            onSyntheticFocus(e);\n        }\n    }, [\n        onFocusChange,\n        onFocusProp,\n        onSyntheticFocus\n    ]);\n    return {\n        focusProps: {\n            onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n            onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null\n        }\n    };\n}\n\n\n\n\n\nlet $507fabe10e71c6fb$var$currentModality = null;\nlet $507fabe10e71c6fb$var$changeHandlers = new Set();\nlet $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;\nlet $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nlet $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n// Only Tab or Esc keys will make focus visible on text input elements\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n    Tab: true,\n    Escape: true\n};\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {\n    for (let handler of $507fabe10e71c6fb$var$changeHandlers)handler(modality, e);\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */ function $507fabe10e71c6fb$var$isValidKey(e) {\n    // Control and Shift keys trigger when navigating back to the tab with keyboard.\n    return !(e.metaKey || !$bx7SL$isMac() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    if ($507fabe10e71c6fb$var$isValidKey(e)) {\n        $507fabe10e71c6fb$var$currentModality = 'keyboard';\n        $507fabe10e71c6fb$var$triggerChangeHandlers('keyboard', e);\n    }\n}\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e) {\n    $507fabe10e71c6fb$var$currentModality = 'pointer';\n    if (e.type === 'mousedown' || e.type === 'pointerdown') {\n        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n        $507fabe10e71c6fb$var$triggerChangeHandlers('pointer', e);\n    }\n}\nfunction $507fabe10e71c6fb$var$handleClickEvent(e) {\n    if ($8a9cb279dc87e130$export$60278871457622de(e)) {\n        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n        $507fabe10e71c6fb$var$currentModality = 'virtual';\n    }\n}\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e) {\n    // Firefox fires two extra focus events when the user first clicks into an iframe:\n    // first on the window, then on the document. We ignore these events so they don't\n    // cause keyboard focus rings to appear.\n    if (e.target === window || e.target === document) return;\n    // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n    // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n    if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n        $507fabe10e71c6fb$var$currentModality = 'virtual';\n        $507fabe10e71c6fb$var$triggerChangeHandlers('virtual', e);\n    }\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n    $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n    // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n    // for example, since a subsequent focus event won't be fired.\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n    $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */ function $507fabe10e71c6fb$var$setupGlobalFocusEvents() {\n    if (typeof window === 'undefined' || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return;\n    // Programmatic focus() calls shouldn't affect the current input modality.\n    // However, we need to detect other cases when a focus event occurs without\n    // a preceding user event (e.g. screen reader focus). Overriding the focus\n    // method on HTMLElement.prototype is a bit hacky, but works.\n    let focus = HTMLElement.prototype.focus;\n    HTMLElement.prototype.focus = function() {\n        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n        focus.apply(this, arguments);\n    };\n    document.addEventListener('keydown', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n    document.addEventListener('keyup', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n    document.addEventListener('click', $507fabe10e71c6fb$var$handleClickEvent, true);\n    // Register focus events on the window so they are sure to happen\n    // before React's event listeners (registered on the document).\n    window.addEventListener('focus', $507fabe10e71c6fb$var$handleFocusEvent, true);\n    window.addEventListener('blur', $507fabe10e71c6fb$var$handleWindowBlur, false);\n    if (typeof PointerEvent !== 'undefined') {\n        document.addEventListener('pointerdown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener('pointermove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener('pointerup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    } else {\n        document.addEventListener('mousedown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener('mousemove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener('mouseup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    }\n    $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;\n}\nif (typeof document !== 'undefined') {\n    if (document.readyState !== 'loading') $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n    else document.addEventListener('DOMContentLoaded', $507fabe10e71c6fb$var$setupGlobalFocusEvents);\n}\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n    return $507fabe10e71c6fb$var$currentModality !== 'pointer';\n}\nfunction $507fabe10e71c6fb$export$630ff653c5ada6a9() {\n    return $507fabe10e71c6fb$var$currentModality;\n}\nfunction $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {\n    $507fabe10e71c6fb$var$currentModality = modality;\n    $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);\n}\nfunction $507fabe10e71c6fb$export$98e20ec92f614cfe() {\n    $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n    let [modality, setModality] = $bx7SL$useState($507fabe10e71c6fb$var$currentModality);\n    $bx7SL$useEffect(()=>{\n        let handler = ()=>{\n            setModality($507fabe10e71c6fb$var$currentModality);\n        };\n        $507fabe10e71c6fb$var$changeHandlers.add(handler);\n        return ()=>{\n            $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n        };\n    }, []);\n    return modality;\n}\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */ function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n    return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\nfunction $507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {\n}) {\n    let { isTextInput: isTextInput , autoFocus: autoFocus  } = props;\n    let [isFocusVisibleState, setFocusVisible] = $bx7SL$useState(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());\n    $507fabe10e71c6fb$export$ec71b4b83ac08ec3(($507fabe10e71c6fb$export$b9b3dfddab17db27)=>{\n        setFocusVisible($507fabe10e71c6fb$export$b9b3dfddab17db27);\n    }, [\n        isTextInput\n    ], {\n        isTextInput: isTextInput\n    });\n    return {\n        isFocusVisible: isFocusVisibleState\n    };\n}\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n    $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n    $bx7SL$useEffect(()=>{\n        let handler = (modality, e)=>{\n            if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n            fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n        };\n        $507fabe10e71c6fb$var$changeHandlers.add(handler);\n        return ()=>{\n            $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n        };\n    }, deps);\n}\n\n\n\n\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n    let { isDisabled: isDisabled , onBlurWithin: onBlurWithin , onFocusWithin: onFocusWithin , onFocusWithinChange: onFocusWithinChange  } = props;\n    let state = $bx7SL$useRef({\n        isFocusWithin: false\n    });\n    let onBlur = $bx7SL$useCallback((e)=>{\n        // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n        // when moving focus inside the element. Only trigger if the currentTarget doesn't\n        // include the relatedTarget (where focus is moving).\n        if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n            state.current.isFocusWithin = false;\n            if (onBlurWithin) onBlurWithin(e);\n            if (onFocusWithinChange) onFocusWithinChange(false);\n        }\n    }, [\n        onBlurWithin,\n        onFocusWithinChange,\n        state\n    ]);\n    let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n    let onFocus = $bx7SL$useCallback((e)=>{\n        if (!state.current.isFocusWithin) {\n            if (onFocusWithin) onFocusWithin(e);\n            if (onFocusWithinChange) onFocusWithinChange(true);\n            state.current.isFocusWithin = true;\n            onSyntheticFocus(e);\n        }\n    }, [\n        onFocusWithin,\n        onFocusWithinChange,\n        onSyntheticFocus\n    ]);\n    if (isDisabled) return {\n        focusWithinProps: {\n            onFocus: null,\n            onBlur: null\n        }\n    };\n    return {\n        focusWithinProps: {\n            onFocus: onFocus,\n            onBlur: onBlur\n        }\n    };\n}\n\n\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;\n    // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n    // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n    // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n    // the distant future because a user previously touched the element.\n    setTimeout(()=>{\n        $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n    }, 50);\n}\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n    if (e.pointerType === 'touch') $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n    if (typeof document === 'undefined') return;\n    if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);\n    else document.addEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n    $6179b936705e76d3$var$hoverCount++;\n    return ()=>{\n        $6179b936705e76d3$var$hoverCount--;\n        if ($6179b936705e76d3$var$hoverCount > 0) return;\n        if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);\n        else document.removeEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n    };\n}\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n    let { onHoverStart: onHoverStart , onHoverChange: onHoverChange , onHoverEnd: onHoverEnd , isDisabled: isDisabled  } = props;\n    let [isHovered, setHovered] = $bx7SL$useState(false);\n    let state = $bx7SL$useRef({\n        isHovered: false,\n        ignoreEmulatedMouseEvents: false,\n        pointerType: '',\n        target: null\n    }).current;\n    $bx7SL$useEffect($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n    let { hoverProps: hoverProps1 , triggerHoverEnd: triggerHoverEnd1  } = $bx7SL$useMemo(()=>{\n        let triggerHoverStart = (event, pointerType)=>{\n            state.pointerType = pointerType;\n            if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;\n            state.isHovered = true;\n            let target = event.currentTarget;\n            state.target = target;\n            if (onHoverStart) onHoverStart({\n                type: 'hoverstart',\n                target: target,\n                pointerType: pointerType\n            });\n            if (onHoverChange) onHoverChange(true);\n            setHovered(true);\n        };\n        let triggerHoverEnd = (event, pointerType)=>{\n            state.pointerType = '';\n            state.target = null;\n            if (pointerType === 'touch' || !state.isHovered) return;\n            state.isHovered = false;\n            let target = event.currentTarget;\n            if (onHoverEnd) onHoverEnd({\n                type: 'hoverend',\n                target: target,\n                pointerType: pointerType\n            });\n            if (onHoverChange) onHoverChange(false);\n            setHovered(false);\n        };\n        let hoverProps = {\n        };\n        if (typeof PointerEvent !== 'undefined') {\n            hoverProps.onPointerEnter = (e)=>{\n                if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;\n                triggerHoverStart(e, e.pointerType);\n            };\n            hoverProps.onPointerLeave = (e)=>{\n                if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n            };\n        } else {\n            hoverProps.onTouchStart = ()=>{\n                state.ignoreEmulatedMouseEvents = true;\n            };\n            hoverProps.onMouseEnter = (e)=>{\n                if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');\n                state.ignoreEmulatedMouseEvents = false;\n            };\n            hoverProps.onMouseLeave = (e)=>{\n                if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');\n            };\n        }\n        return {\n            hoverProps: hoverProps,\n            triggerHoverEnd: triggerHoverEnd\n        };\n    }, [\n        onHoverStart,\n        onHoverChange,\n        onHoverEnd,\n        isDisabled,\n        state\n    ]);\n    $bx7SL$useEffect(()=>{\n        // Call the triggerHoverEnd as soon as isDisabled changes to true\n        // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n        if (isDisabled) triggerHoverEnd1({\n            currentTarget: state.target\n        }, state.pointerType);\n    }, [\n        isDisabled\n    ]);\n    return {\n        hoverProps: hoverProps1,\n        isHovered: isHovered\n    };\n}\n\n\n\nfunction $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {\n    let { ref: ref , onInteractOutside: onInteractOutside , isDisabled: isDisabled , onInteractOutsideStart: onInteractOutsideStart  } = props;\n    let stateRef = $bx7SL$useRef({\n        isPointerDown: false,\n        ignoreEmulatedMouseEvents: false,\n        onInteractOutside: onInteractOutside,\n        onInteractOutsideStart: onInteractOutsideStart\n    });\n    let state = stateRef.current;\n    state.onInteractOutside = onInteractOutside;\n    state.onInteractOutsideStart = onInteractOutsideStart;\n    $bx7SL$useEffect(()=>{\n        if (isDisabled) return;\n        let onPointerDown = (e)=>{\n            if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {\n                if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);\n                state.isPointerDown = true;\n            }\n        };\n        // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n        if (typeof PointerEvent !== 'undefined') {\n            let onPointerUp = (e)=>{\n                if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n                    state.isPointerDown = false;\n                    state.onInteractOutside(e);\n                }\n            };\n            // changing these to capture phase fixed combobox\n            document.addEventListener('pointerdown', onPointerDown, true);\n            document.addEventListener('pointerup', onPointerUp, true);\n            return ()=>{\n                document.removeEventListener('pointerdown', onPointerDown, true);\n                document.removeEventListener('pointerup', onPointerUp, true);\n            };\n        } else {\n            let onMouseUp = (e)=>{\n                if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;\n                else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n                    state.isPointerDown = false;\n                    state.onInteractOutside(e);\n                }\n            };\n            let onTouchEnd = (e)=>{\n                state.ignoreEmulatedMouseEvents = true;\n                if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n                    state.isPointerDown = false;\n                    state.onInteractOutside(e);\n                }\n            };\n            document.addEventListener('mousedown', onPointerDown, true);\n            document.addEventListener('mouseup', onMouseUp, true);\n            document.addEventListener('touchstart', onPointerDown, true);\n            document.addEventListener('touchend', onTouchEnd, true);\n            return ()=>{\n                document.removeEventListener('mousedown', onPointerDown, true);\n                document.removeEventListener('mouseup', onMouseUp, true);\n                document.removeEventListener('touchstart', onPointerDown, true);\n                document.removeEventListener('touchend', onTouchEnd, true);\n            };\n        }\n    }, [\n        ref,\n        state,\n        isDisabled\n    ]);\n}\nfunction $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {\n    if (event.button > 0) return false;\n    // if the event target is no longer in the document\n    if (event.target) {\n        const ownerDocument = event.target.ownerDocument;\n        if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;\n    }\n    return ref.current && !ref.current.contains(event.target);\n}\n\n\nfunction $93925083ecbb358c$export$48d1ea6320830260(handler) {\n    if (!handler) return;\n    let shouldStopPropagation = true;\n    return (e)=>{\n        let event = {\n            ...e,\n            preventDefault () {\n                e.preventDefault();\n            },\n            isDefaultPrevented () {\n                return e.isDefaultPrevented();\n            },\n            stopPropagation () {\n                console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n            },\n            continuePropagation () {\n                shouldStopPropagation = false;\n            }\n        };\n        handler(event);\n        if (shouldStopPropagation) e.stopPropagation();\n    };\n}\n\n\nfunction $46d819fcbaf35654$export$8f71654801c2f7cd(props) {\n    return {\n        keyboardProps: props.isDisabled ? {\n        } : {\n            onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),\n            onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)\n        }\n    };\n}\n\n\n\n\n\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n    let { onMoveStart: onMoveStart , onMove: onMove , onMoveEnd: onMoveEnd  } = props;\n    let state = $bx7SL$useRef({\n        didMove: false,\n        lastPosition: null,\n        id: null\n    });\n    let { addGlobalListener: addGlobalListener , removeGlobalListener: removeGlobalListener  } = $bx7SL$useGlobalListeners();\n    let moveProps1 = $bx7SL$useMemo(()=>{\n        let moveProps = {\n        };\n        let start = ()=>{\n            $14c0b72509d70225$export$16a4697467175487();\n            state.current.didMove = false;\n        };\n        let move = (originalEvent, pointerType, deltaX, deltaY)=>{\n            if (deltaX === 0 && deltaY === 0) return;\n            if (!state.current.didMove) {\n                state.current.didMove = true;\n                onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n                    type: 'movestart',\n                    pointerType: pointerType,\n                    shiftKey: originalEvent.shiftKey,\n                    metaKey: originalEvent.metaKey,\n                    ctrlKey: originalEvent.ctrlKey,\n                    altKey: originalEvent.altKey\n                });\n            }\n            onMove({\n                type: 'move',\n                pointerType: pointerType,\n                deltaX: deltaX,\n                deltaY: deltaY,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n        };\n        let end = (originalEvent, pointerType)=>{\n            $14c0b72509d70225$export$b0d6fa1ab32e3295();\n            if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n                type: 'moveend',\n                pointerType: pointerType,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n        };\n        if (typeof PointerEvent === 'undefined') {\n            let onMouseMove = (e)=>{\n                if (e.button === 0) {\n                    move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                }\n            };\n            let onMouseUp = (e)=>{\n                if (e.button === 0) {\n                    end(e, 'mouse');\n                    removeGlobalListener(window, 'mousemove', onMouseMove, false);\n                    removeGlobalListener(window, 'mouseup', onMouseUp, false);\n                }\n            };\n            moveProps.onMouseDown = (e)=>{\n                if (e.button === 0) {\n                    start();\n                    e.stopPropagation();\n                    e.preventDefault();\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                    addGlobalListener(window, 'mousemove', onMouseMove, false);\n                    addGlobalListener(window, 'mouseup', onMouseUp, false);\n                }\n            };\n            let onTouchMove = (e)=>{\n                let touch = [\n                    ...e.changedTouches\n                ].findIndex(({ identifier: identifier  })=>identifier === state.current.id\n                );\n                if (touch >= 0) {\n                    let { pageX: pageX , pageY: pageY  } = e.changedTouches[touch];\n                    move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n                    state.current.lastPosition = {\n                        pageX: pageX,\n                        pageY: pageY\n                    };\n                }\n            };\n            let onTouchEnd = (e)=>{\n                let touch = [\n                    ...e.changedTouches\n                ].findIndex(({ identifier: identifier  })=>identifier === state.current.id\n                );\n                if (touch >= 0) {\n                    end(e, 'touch');\n                    state.current.id = null;\n                    removeGlobalListener(window, 'touchmove', onTouchMove);\n                    removeGlobalListener(window, 'touchend', onTouchEnd);\n                    removeGlobalListener(window, 'touchcancel', onTouchEnd);\n                }\n            };\n            moveProps.onTouchStart = (e)=>{\n                if (e.changedTouches.length === 0 || state.current.id != null) return;\n                let { pageX: pageX , pageY: pageY , identifier: identifier  } = e.changedTouches[0];\n                start();\n                e.stopPropagation();\n                e.preventDefault();\n                state.current.lastPosition = {\n                    pageX: pageX,\n                    pageY: pageY\n                };\n                state.current.id = identifier;\n                addGlobalListener(window, 'touchmove', onTouchMove, false);\n                addGlobalListener(window, 'touchend', onTouchEnd, false);\n                addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n            };\n        } else {\n            let onPointerMove = (e)=>{\n                if (e.pointerId === state.current.id) {\n                    let pointerType = e.pointerType || 'mouse';\n                    // Problems with PointerEvent#movementX/movementY:\n                    // 1. it is always 0 on macOS Safari.\n                    // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n                    move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                }\n            };\n            let onPointerUp = (e)=>{\n                if (e.pointerId === state.current.id) {\n                    let pointerType = e.pointerType || 'mouse';\n                    end(e, pointerType);\n                    state.current.id = null;\n                    removeGlobalListener(window, 'pointermove', onPointerMove, false);\n                    removeGlobalListener(window, 'pointerup', onPointerUp, false);\n                    removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n                }\n            };\n            moveProps.onPointerDown = (e)=>{\n                if (e.button === 0 && state.current.id == null) {\n                    start();\n                    e.stopPropagation();\n                    e.preventDefault();\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                    state.current.id = e.pointerId;\n                    addGlobalListener(window, 'pointermove', onPointerMove, false);\n                    addGlobalListener(window, 'pointerup', onPointerUp, false);\n                    addGlobalListener(window, 'pointercancel', onPointerUp, false);\n                }\n            };\n        }\n        let triggerKeyboardMove = (e, deltaX, deltaY)=>{\n            start();\n            move(e, 'keyboard', deltaX, deltaY);\n            end(e, 'keyboard');\n        };\n        moveProps.onKeyDown = (e)=>{\n            switch(e.key){\n                case 'Left':\n                case 'ArrowLeft':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, -1, 0);\n                    break;\n                case 'Right':\n                case 'ArrowRight':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, 1, 0);\n                    break;\n                case 'Up':\n                case 'ArrowUp':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, 0, -1);\n                    break;\n                case 'Down':\n                case 'ArrowDown':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, 0, 1);\n                    break;\n            }\n        };\n        return moveProps;\n    }, [\n        state,\n        onMoveStart,\n        onMove,\n        onMoveEnd,\n        addGlobalListener,\n        removeGlobalListener\n    ]);\n    return {\n        moveProps: moveProps1\n    };\n}\n\n\n\n\n\nfunction $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n    let { onScroll: onScroll , isDisabled: isDisabled  } = props;\n    let onScrollHandler = $bx7SL$useCallback((e)=>{\n        // If the ctrlKey is pressed, this is a zoom event, do nothing.\n        if (e.ctrlKey) return;\n        // stop scrolling the page\n        e.preventDefault();\n        e.stopPropagation();\n        if (onScroll) onScroll({\n            deltaX: e.deltaX,\n            deltaY: e.deltaY\n        });\n    }, [\n        onScroll\n    ]);\n    $bx7SL$useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n\n\n\n\n\nconst $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n    let { isDisabled: isDisabled , onLongPressStart: onLongPressStart , onLongPressEnd: onLongPressEnd , onLongPress: onLongPress , threshold: threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD , accessibilityDescription: accessibilityDescription  } = props;\n    const timeRef = $bx7SL$useRef(null);\n    let { addGlobalListener: addGlobalListener , removeGlobalListener: removeGlobalListener  } = $bx7SL$useGlobalListeners();\n    let { pressProps: pressProps  } = $f6c31cce2adf654f$export$45712eceda6fad21({\n        isDisabled: isDisabled,\n        onPressStart (e1) {\n            if (e1.pointerType === 'mouse' || e1.pointerType === 'touch') {\n                if (onLongPressStart) onLongPressStart({\n                    ...e1,\n                    type: 'longpressstart'\n                });\n                timeRef.current = setTimeout(()=>{\n                    // Prevent other usePress handlers from also handling this event.\n                    e1.target.dispatchEvent(new PointerEvent('pointercancel', {\n                        bubbles: true\n                    }));\n                    if (onLongPress) onLongPress({\n                        ...e1,\n                        type: 'longpress'\n                    });\n                    timeRef.current = null;\n                }, threshold);\n                // Prevent context menu, which may be opened on long press on touch devices\n                if (e1.pointerType === 'touch') {\n                    let onContextMenu = (e)=>{\n                        e.preventDefault();\n                    };\n                    addGlobalListener(e1.target, 'contextmenu', onContextMenu, {\n                        once: true\n                    });\n                    addGlobalListener(window, 'pointerup', ()=>{\n                        // If no contextmenu event is fired quickly after pointerup, remove the handler\n                        // so future context menu events outside a long press are not prevented.\n                        setTimeout(()=>{\n                            removeGlobalListener(e1.target, 'contextmenu', onContextMenu);\n                        }, 30);\n                    }, {\n                        once: true\n                    });\n                }\n            }\n        },\n        onPressEnd (e) {\n            if (timeRef.current) clearTimeout(timeRef.current);\n            if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({\n                ...e,\n                type: 'longpressend'\n            });\n        }\n    });\n    let descriptionProps = $bx7SL$useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n    return {\n        longPressProps: $bx7SL$mergeProps(pressProps, descriptionProps)\n    };\n}\n\n\n\n\nexport {$3b117e43dc0ca95d$export$27c701ed9e449e99 as Pressable, $f1ab8c75478c6f73$export$3351871ee4b288b8 as PressResponder, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6 as useFocus, $507fabe10e71c6fb$export$b9b3dfddab17db27 as isFocusVisible, $507fabe10e71c6fb$export$630ff653c5ada6a9 as getInteractionModality, $507fabe10e71c6fb$export$8397ddfc504fdb9a as setInteractionModality, $507fabe10e71c6fb$export$98e20ec92f614cfe as useInteractionModality, $507fabe10e71c6fb$export$ffd9e5021c1fb2d6 as useFocusVisible, $507fabe10e71c6fb$export$ec71b4b83ac08ec3 as useFocusVisibleListener, $9ab94262bd0047c7$export$420e68273165f4ec as useFocusWithin, $6179b936705e76d3$export$ae780daf29e6d456 as useHover, $e0b6e0b68ec7f50f$export$872b660ac5a1ff98 as useInteractOutside, $46d819fcbaf35654$export$8f71654801c2f7cd as useKeyboard, $e8a7022cf87cba2a$export$36da96379f79f245 as useMove, $f6c31cce2adf654f$export$45712eceda6fad21 as usePress, $7d0a636d7a4dcefd$export$2123ff2b87c81ca as useScrollWheel, $8a26561d2877236e$export$c24ed0104d07eab9 as useLongPress};\n//# sourceMappingURL=module.js.map\n"],"names":["$bx7SL$isIOS","$bx7SL$runAfterTransition","$bx7SL$useRef","$bx7SL$useLayoutEffect","$bx7SL$useCallback","$bx7SL$react","$bx7SL$useContext","$bx7SL$mergeProps","$bx7SL$useSyncRef","$bx7SL$useState","$bx7SL$useGlobalListeners","$bx7SL$useMemo","$bx7SL$focusWithoutScrolling","$bx7SL$useEffect","$bx7SL$isMac","$bx7SL$useDescription"],"mappings":"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"}