{"version":3,"file":"real-module.79953120.js","sources":["../../node_modules/@internationalized/string/dist/module.js","../../node_modules/@internationalized/number/dist/module.js","../../node_modules/@react-aria/i18n/dist/real-module.js"],"sourcesContent":["class $5b160d28a433310d$export$c17fa47878dc55b6 {\n    /** Returns a localized string for the given key and locale. */ getStringForLocale(key, locale) {\n        let strings = this.strings[locale];\n        if (!strings) {\n            strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);\n            this.strings[locale] = strings;\n        }\n        let string = strings[key];\n        if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n        return string;\n    }\n    constructor(messages, defaultLocale = 'en-US'){\n        // Clone messages so we don't modify the original object.\n        this.strings = {\n            ...messages\n        };\n        this.defaultLocale = defaultLocale;\n    }\n}\nfunction $5b160d28a433310d$var$getStringsForLocale(locale, strings, defaultLocale = 'en-US') {\n    // If there is an exact match, use it.\n    if (strings[locale]) return strings[locale];\n    // Attempt to find the closest match by language.\n    // For example, if the locale is fr-CA (French Canadian), but there is only\n    // an fr-FR (France) set of strings, use that.\n    // This could be replaced with Intl.LocaleMatcher once it is supported.\n    // https://github.com/tc39/proposal-intl-localematcher\n    let language = $5b160d28a433310d$var$getLanguage(locale);\n    if (strings[language]) return strings[language];\n    for(let key in strings){\n        if (key.startsWith(language + '-')) return strings[key];\n    }\n    // Nothing close, use english.\n    return strings[defaultLocale];\n}\nfunction $5b160d28a433310d$var$getLanguage(locale) {\n    // @ts-ignore\n    if (Intl.Locale) // @ts-ignore\n    return new Intl.Locale(locale).language;\n    return locale.split('-')[0];\n}\n\n\nconst $6db58dc88e78b024$var$pluralRulesCache = new Map();\nconst $6db58dc88e78b024$var$numberFormatCache = new Map();\nclass $6db58dc88e78b024$export$2f817fcdc4b89ae0 {\n    /** Formats a localized string for the given key with the provided variables. */ format(key, variables) {\n        let message = this.strings.getStringForLocale(key, this.locale);\n        return typeof message === 'function' ? message(variables, this) : message;\n    }\n    plural(count, options, type = 'cardinal') {\n        let opt = options['=' + count];\n        if (opt) return typeof opt === 'function' ? opt() : opt;\n        let key = this.locale + ':' + type;\n        let pluralRules = $6db58dc88e78b024$var$pluralRulesCache.get(key);\n        if (!pluralRules) {\n            pluralRules = new Intl.PluralRules(this.locale, {\n                type: type\n            });\n            $6db58dc88e78b024$var$pluralRulesCache.set(key, pluralRules);\n        }\n        let selected = pluralRules.select(count);\n        opt = options[selected] || options.other;\n        return typeof opt === 'function' ? opt() : opt;\n    }\n    number(value) {\n        let numberFormat = $6db58dc88e78b024$var$numberFormatCache.get(this.locale);\n        if (!numberFormat) {\n            numberFormat = new Intl.NumberFormat(this.locale);\n            $6db58dc88e78b024$var$numberFormatCache.set(this.locale, numberFormat);\n        }\n        return numberFormat.format(value);\n    }\n    select(options, value) {\n        let opt = options[value] || options.other;\n        return typeof opt === 'function' ? opt() : opt;\n    }\n    constructor(locale, strings){\n        this.locale = locale;\n        this.strings = strings;\n    }\n}\n\n\n\n\nexport {$5b160d28a433310d$export$c17fa47878dc55b6 as LocalizedStringDictionary, $6db58dc88e78b024$export$2f817fcdc4b89ae0 as LocalizedStringFormatter};\n//# sourceMappingURL=module.js.map\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ let $488c6ddbf4ef74c2$var$formatterCache = new Map();\nlet $488c6ddbf4ef74c2$var$supportsSignDisplay = false;\ntry {\n    // @ts-ignore\n    $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat('de-DE', {\n        signDisplay: 'exceptZero'\n    }).resolvedOptions().signDisplay === 'exceptZero';\n// eslint-disable-next-line no-empty\n} catch (e) {\n}\nlet $488c6ddbf4ef74c2$var$supportsUnit = false;\ntry {\n    // @ts-ignore\n    $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat('de-DE', {\n        style: 'unit',\n        unit: 'degree'\n    }).resolvedOptions().style === 'unit';\n// eslint-disable-next-line no-empty\n} catch (e1) {\n}\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nconst $488c6ddbf4ef74c2$var$UNITS = {\n    degree: {\n        narrow: {\n            default: '°',\n            'ja-JP': ' 度',\n            'zh-TW': '度',\n            'sl-SI': ' °'\n        }\n    }\n};\nclass $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 {\n    /** Formats a number value as a string, according to the locale and options provided to the constructor. */ format(value) {\n        let res = '';\n        if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);\n        else res = this.numberFormatter.format(value);\n        if (this.options.style === 'unit' && !$488c6ddbf4ef74c2$var$supportsUnit) {\n            var ref;\n            let { unit: unit , unitDisplay: unitDisplay = 'short' , locale: locale  } = this.resolvedOptions();\n            let values = (ref = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || ref === void 0 ? void 0 : ref[unitDisplay];\n            res += values[locale] || values.default;\n        }\n        return res;\n    }\n    /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */ formatToParts(value) {\n        // TODO: implement signDisplay for formatToParts\n        // @ts-ignore\n        return this.numberFormatter.formatToParts(value);\n    }\n    /** Formats a number range as a string. */ formatRange(start, end) {\n        // @ts-ignore\n        if (typeof this.numberFormatter.formatRange === 'function') // @ts-ignore\n        return this.numberFormatter.formatRange(start, end);\n        if (end < start) throw new RangeError('End date must be >= start date');\n        // Very basic fallback for old browsers.\n        return `${this.format(start)} – ${this.format(end)}`;\n    }\n    /** Formats a number range as an array of parts. */ formatRangeToParts(start, end) {\n        // @ts-ignore\n        if (typeof this.numberFormatter.formatRangeToParts === 'function') // @ts-ignore\n        return this.numberFormatter.formatRangeToParts(start, end);\n        if (end < start) throw new RangeError('End date must be >= start date');\n        let startParts = this.numberFormatter.formatToParts(start);\n        let endParts = this.numberFormatter.formatToParts(end);\n        return [\n            ...startParts.map((p)=>({\n                    ...p,\n                    source: 'startRange'\n                })\n            ),\n            {\n                type: 'literal',\n                value: ' – ',\n                source: 'shared'\n            },\n            ...endParts.map((p)=>({\n                    ...p,\n                    source: 'endRange'\n                })\n            )\n        ];\n    }\n    /** Returns the resolved formatting options based on the values passed to the constructor. */ resolvedOptions() {\n        let options = this.numberFormatter.resolvedOptions();\n        if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) options = {\n            ...options,\n            signDisplay: this.options.signDisplay\n        };\n        if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === 'unit') options = {\n            ...options,\n            style: 'unit',\n            unit: this.options.unit,\n            unitDisplay: this.options.unitDisplay\n        };\n        return options;\n    }\n    constructor(locale, options = {\n    }){\n        this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);\n        this.options = options;\n    }\n}\nfunction $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options = {\n}) {\n    let { numberingSystem: numberingSystem  } = options;\n    if (numberingSystem && locale.indexOf('-u-nu-') === -1) locale = `${locale}-u-nu-${numberingSystem}`;\n    if (options.style === 'unit' && !$488c6ddbf4ef74c2$var$supportsUnit) {\n        var ref;\n        let { unit: unit , unitDisplay: unitDisplay = 'short'  } = options;\n        if (!unit) throw new Error('unit option must be provided with style: \"unit\"');\n        if (!((ref = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || ref === void 0 ? void 0 : ref[unitDisplay])) throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n        options = {\n            ...options,\n            style: 'decimal'\n        };\n    }\n    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1\n    ).join() : '');\n    if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey)) return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);\n    let numberFormatter = new Intl.NumberFormat(locale, options);\n    $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);\n    return numberFormatter;\n}\nfunction $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {\n    if (signDisplay === 'auto') return numberFormat.format(num);\n    else if (signDisplay === 'never') return numberFormat.format(Math.abs(num));\n    else {\n        let needsPositiveSign = false;\n        if (signDisplay === 'always') needsPositiveSign = num > 0 || Object.is(num, 0);\n        else if (signDisplay === 'exceptZero') {\n            if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);\n            else needsPositiveSign = num > 0;\n        }\n        if (needsPositiveSign) {\n            let negative = numberFormat.format(-num);\n            let noSign = numberFormat.format(num);\n            // ignore RTL/LTR marker character\n            let minus = negative.replace(noSign, '').replace(/\\u200e|\\u061C/, '');\n            if ([\n                ...minus\n            ].length !== 1) console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');\n            let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);\n            return positive;\n        } else return numberFormat.format(num);\n    }\n}\n\n\nconst $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp('^.*\\\\(.*\\\\).*$');\nconst $6c7bd7858deea686$var$NUMBERING_SYSTEMS = [\n    'latn',\n    'arab',\n    'hanidec'\n];\nclass $6c7bd7858deea686$export$cd11ab140839f11d {\n    /**\n   * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n   */ parse(value) {\n        return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);\n    }\n    /**\n   * Returns whether the given string could potentially be a valid number. This should be used to\n   * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n   * of the minus/plus sign characters can be checked.\n   */ isValidPartialNumber(value, minValue, maxValue) {\n        return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n    }\n    /**\n   * Returns a numbering system for which the given string is valid in the current locale.\n   * If no numbering system could be detected, the default numbering system for the current\n   * locale is returned.\n   */ getNumberingSystem(value) {\n        return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n    }\n    constructor(locale, options = {\n    }){\n        this.locale = locale;\n        this.options = options;\n    }\n}\nconst $6c7bd7858deea686$var$numberParserCache = new Map();\nfunction $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {\n    // First try the default numbering system for the provided locale\n    let defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options);\n    // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n    // try each of the other supported numbering systems until we find one that matches.\n    if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {\n        for (let numberingSystem of $6c7bd7858deea686$var$NUMBERING_SYSTEMS)if (numberingSystem !== defaultParser.options.numberingSystem) {\n            let parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);\n            if (parser.isValidPartialNumber(value)) return parser;\n        }\n    }\n    return defaultParser;\n}\nfunction $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {\n    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1\n    ).join() : '');\n    let parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);\n    if (!parser) {\n        parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);\n        $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);\n    }\n    return parser;\n}\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass $6c7bd7858deea686$var$NumberParserImpl {\n    parse(value) {\n        // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n        let fullySanitizedValue = this.sanitize(value);\n        // Remove group characters, and replace decimal points and numerals with ASCII values.\n        fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, '').replace(this.symbols.decimal, '.').replace(this.symbols.minusSign, '-').replace(this.symbols.numeral, this.symbols.index);\n        let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n        if (isNaN(newValue)) return NaN;\n        // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n        if (this.options.currencySign === 'accounting' && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue;\n        // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n        if (this.options.style === 'percent') {\n            newValue /= 100;\n            var _maximumFractionDigits;\n            // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n            newValue = +newValue.toFixed(((_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _maximumFractionDigits !== void 0 ? _maximumFractionDigits : 0) + 2);\n        }\n        return newValue;\n    }\n    sanitize(value) {\n        // Remove literals and whitespace, which are allowed anywhere in the string\n        value = value.replace(this.symbols.literals, '');\n        // Replace the ASCII minus sign with the minus sign used in the current locale\n        // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n        value = value.replace('-', this.symbols.minusSign);\n        // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n        // instead they use the , (44) character or apparently the (1548) character.\n        if (this.options.numberingSystem === 'arab') {\n            value = value.replace(',', this.symbols.decimal);\n            value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n            value = $6c7bd7858deea686$var$replaceAll(value, '.', this.symbols.group);\n        }\n        // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n        // so allow 'period' as a group char and replace it with a space\n        if (this.options.locale === 'fr-FR') value = $6c7bd7858deea686$var$replaceAll(value, '.', String.fromCharCode(8239));\n        return value;\n    }\n    isValidPartialNumber(value, minValue = -Infinity, maxValue = Infinity) {\n        value = this.sanitize(value);\n        // Remove minus or plus sign, which must be at the start of the string.\n        if (value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);\n        else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length);\n        // Numbers cannot start with a group separator\n        if (value.startsWith(this.symbols.group)) return false;\n        // Remove numerals, groups, and decimals\n        value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, '').replace(this.symbols.numeral, '').replace(this.symbols.decimal, '');\n        // The number is valid if there are no remaining characters\n        return value.length === 0;\n    }\n    constructor(locale, options = {\n    }){\n        this.formatter = new Intl.NumberFormat(locale, options);\n        this.options = this.formatter.resolvedOptions();\n        this.symbols = $6c7bd7858deea686$var$getSymbols(this.formatter, this.options, options);\n    }\n}\nconst $6c7bd7858deea686$var$nonLiteralParts = new Set([\n    'decimal',\n    'fraction',\n    'integer',\n    'minusSign',\n    'plusSign',\n    'group'\n]);\nfunction $6c7bd7858deea686$var$getSymbols(formatter, intlOptions, originalOptions) {\n    var ref, ref1, ref2, ref3;\n    // Note: some locale's don't add a group symbol until there is a ten thousands place\n    let allParts = formatter.formatToParts(-10000.111);\n    let posAllParts = formatter.formatToParts(10000.111);\n    let singularParts = formatter.formatToParts(1);\n    var ref4;\n    let minusSign = (ref4 = (ref = allParts.find((p)=>p.type === 'minusSign'\n    )) === null || ref === void 0 ? void 0 : ref.value) !== null && ref4 !== void 0 ? ref4 : '-';\n    let plusSign = (ref1 = posAllParts.find((p)=>p.type === 'plusSign'\n    )) === null || ref1 === void 0 ? void 0 : ref1.value;\n    // Safari does not support the signDisplay option, but our number parser polyfills it.\n    // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n    // @ts-ignore\n    if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === 'exceptZero' || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === 'always')) plusSign = '+';\n    let decimal = (ref2 = allParts.find((p)=>p.type === 'decimal'\n    )) === null || ref2 === void 0 ? void 0 : ref2.value;\n    let group = (ref3 = allParts.find((p)=>p.type === 'group'\n    )) === null || ref3 === void 0 ? void 0 : ref3.value;\n    // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n    // don't contribute to the numerical value\n    let pluralLiterals = allParts.filter((p)=>!$6c7bd7858deea686$var$nonLiteralParts.has(p.type)\n    ).map((p)=>$6c7bd7858deea686$var$escapeRegex(p.value)\n    );\n    let singularLiterals = singularParts.filter((p)=>!$6c7bd7858deea686$var$nonLiteralParts.has(p.type)\n    ).map((p)=>$6c7bd7858deea686$var$escapeRegex(p.value)\n    );\n    let sortedLiterals = [\n        ...new Set([\n            ...singularLiterals,\n            ...pluralLiterals\n        ])\n    ].sort((a, b)=>b.length - a.length\n    );\n    let literals = sortedLiterals.length === 0 ? new RegExp('[\\\\p{White_Space}]', 'gu') : new RegExp(`${sortedLiterals.join('|')}|[\\\\p{White_Space}]`, 'gu');\n    // These are for replacing non-latn characters with the latn equivalent\n    let numerals = [\n        ...new Intl.NumberFormat(intlOptions.locale, {\n            useGrouping: false\n        }).format(9876543210)\n    ].reverse();\n    let indexes = new Map(numerals.map((d, i)=>[\n            d,\n            i\n        ]\n    ));\n    let numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n    let index = (d)=>String(indexes.get(d))\n    ;\n    return {\n        minusSign: minusSign,\n        plusSign: plusSign,\n        decimal: decimal,\n        group: group,\n        literals: literals,\n        numeral: numeral,\n        index: index\n    };\n}\nfunction $6c7bd7858deea686$var$replaceAll(str, find, replace) {\n    // @ts-ignore\n    if (str.replaceAll) // @ts-ignore\n    return str.replaceAll(find, replace);\n    return str.split(find).join(replace);\n}\nfunction $6c7bd7858deea686$var$escapeRegex(string) {\n    return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\n\n\n\nexport {$488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 as NumberFormatter, $6c7bd7858deea686$export$cd11ab140839f11d as NumberParser};\n//# sourceMappingURL=module.js.map\n","import $iFADg$react, {useContext as $iFADg$useContext, useState as $iFADg$useState, useEffect as $iFADg$useEffect, useMemo as $iFADg$useMemo, useRef as $iFADg$useRef} from \"react\";\nimport {useIsSSR as $iFADg$useIsSSR} from \"@react-aria/ssr\";\nimport {LocalizedStringDictionary as $iFADg$LocalizedStringDictionary, LocalizedStringFormatter as $iFADg$LocalizedStringFormatter} from \"@internationalized/string\";\nimport {DateFormatter as $iFADg$DateFormatter} from \"@internationalized/date\";\nimport {NumberFormatter as $iFADg$NumberFormatter} from \"@internationalized/number\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // https://en.wikipedia.org/wiki/Right-to-left\nconst $148a7a147e38ea7f$var$RTL_SCRIPTS = new Set([\n    'Arab',\n    'Syrc',\n    'Samr',\n    'Mand',\n    'Thaa',\n    'Mend',\n    'Nkoo',\n    'Adlm',\n    'Rohg',\n    'Hebr'\n]);\nconst $148a7a147e38ea7f$var$RTL_LANGS = new Set([\n    'ae',\n    'ar',\n    'arc',\n    'bcc',\n    'bqi',\n    'ckb',\n    'dv',\n    'fa',\n    'glk',\n    'he',\n    'ku',\n    'mzn',\n    'nqo',\n    'pnb',\n    'ps',\n    'sd',\n    'ug',\n    'ur',\n    'yi'\n]);\nfunction $148a7a147e38ea7f$export$702d680b21cbd764(locale) {\n    // If the Intl.Locale API is available, use it to get the script for the locale.\n    // This is more accurate than guessing by language, since languages can be written in multiple scripts.\n    // @ts-ignore\n    if (Intl.Locale) {\n        // @ts-ignore\n        let script = new Intl.Locale(locale).maximize().script;\n        return $148a7a147e38ea7f$var$RTL_SCRIPTS.has(script);\n    }\n    // If not, just guess by the language (first part of the locale)\n    let lang = locale.split('-')[0];\n    return $148a7a147e38ea7f$var$RTL_LANGS.has(lang);\n}\n\n\n\n\n\nfunction $1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {\n    // @ts-ignore\n    let locale = typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage) || 'en-US';\n    try {\n        // @ts-ignore\n        Intl.DateTimeFormat.supportedLocalesOf([\n            locale\n        ]);\n    } catch (_err) {\n        locale = 'en-US';\n    }\n    return {\n        locale: locale,\n        direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? 'rtl' : 'ltr'\n    };\n}\nlet $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();\nlet $1e5a04cdaf7d1af8$var$listeners = new Set();\nfunction $1e5a04cdaf7d1af8$var$updateLocale() {\n    $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();\n    for (let listener of $1e5a04cdaf7d1af8$var$listeners)listener($1e5a04cdaf7d1af8$var$currentLocale);\n}\nfunction $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {\n    let isSSR = $iFADg$useIsSSR();\n    let [defaultLocale, setDefaultLocale] = $iFADg$useState($1e5a04cdaf7d1af8$var$currentLocale);\n    $iFADg$useEffect(()=>{\n        if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.addEventListener('languagechange', $1e5a04cdaf7d1af8$var$updateLocale);\n        $1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);\n        return ()=>{\n            $1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);\n            if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.removeEventListener('languagechange', $1e5a04cdaf7d1af8$var$updateLocale);\n        };\n    }, []);\n    // We cannot determine the browser's language on the server, so default to\n    // en-US. This will be updated after hydration on the client to the correct value.\n    if (isSSR) return {\n        locale: 'en-US',\n        direction: 'ltr'\n    };\n    return defaultLocale;\n}\n\n\n\nconst $18f2051aff69b9bf$var$I18nContext = /*#__PURE__*/ $iFADg$react.createContext(null);\nfunction $18f2051aff69b9bf$export$a54013f0d02a8f82(props) {\n    let { locale: locale , children: children  } = props;\n    let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();\n    let value = locale ? {\n        locale: locale,\n        direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? 'rtl' : 'ltr'\n    } : defaultLocale;\n    return(/*#__PURE__*/ $iFADg$react.createElement($18f2051aff69b9bf$var$I18nContext.Provider, {\n        value: value\n    }, children));\n}\nfunction $18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {\n    let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();\n    let context = $iFADg$useContext($18f2051aff69b9bf$var$I18nContext);\n    return context || defaultLocale;\n}\n\n\nvar $2aa2084a6c2b6b4f$exports = {};\n\"use strict\";\n\n\n\n\n\nconst $fca6afa0e843324b$var$cache = new WeakMap();\nfunction $fca6afa0e843324b$var$getCachedDictionary(strings) {\n    let dictionary = $fca6afa0e843324b$var$cache.get(strings);\n    if (!dictionary) {\n        dictionary = new $iFADg$LocalizedStringDictionary(strings);\n        $fca6afa0e843324b$var$cache.set(strings, dictionary);\n    }\n    return dictionary;\n}\nfunction $fca6afa0e843324b$export$f12b703ca79dfbb1(strings) {\n    let { locale: locale  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n    let dictionary = $iFADg$useMemo(()=>$fca6afa0e843324b$var$getCachedDictionary(strings)\n    , [\n        strings\n    ]);\n    return $iFADg$useMemo(()=>new $iFADg$LocalizedStringFormatter(locale, dictionary)\n    , [\n        locale,\n        dictionary\n    ]);\n}\n\n\n\n\n\nfunction $896ba0a80a8f4d36$export$85fd5fdf27bacc79(options) {\n    // Reuse last options object if it is shallowly equal, which allows the useMemo result to also be reused.\n    let lastOptions = $iFADg$useRef(null);\n    if (options && lastOptions.current && $896ba0a80a8f4d36$var$isEqual(options, lastOptions.current)) options = lastOptions.current;\n    lastOptions.current = options;\n    let { locale: locale  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n    return $iFADg$useMemo(()=>new $iFADg$DateFormatter(locale, options)\n    , [\n        locale,\n        options\n    ]);\n}\nfunction $896ba0a80a8f4d36$var$isEqual(a, b) {\n    if (a === b) return true;\n    let aKeys = Object.keys(a);\n    let bKeys = Object.keys(b);\n    if (aKeys.length !== bKeys.length) return false;\n    for (let key of aKeys){\n        if (b[key] !== a[key]) return false;\n    }\n    return true;\n}\n\n\n\n\n\nfunction $a916eb452884faea$export$b7a616150fdb9f44(options = {\n}) {\n    let { locale: locale  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n    return $iFADg$useMemo(()=>new $iFADg$NumberFormatter(locale, options)\n    , [\n        locale,\n        options\n    ]);\n}\n\n\n\nlet $325a3faab7a68acd$var$cache = new Map();\nfunction $325a3faab7a68acd$export$a16aca283550c30d(options) {\n    let { locale: locale  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1\n    ).join() : '');\n    if ($325a3faab7a68acd$var$cache.has(cacheKey)) return $325a3faab7a68acd$var$cache.get(cacheKey);\n    let formatter = new Intl.Collator(locale, options);\n    $325a3faab7a68acd$var$cache.set(cacheKey, formatter);\n    return formatter;\n}\n\n\n\nfunction $bb77f239b46e8c72$export$3274cf84b703fff(options) {\n    let collator = $325a3faab7a68acd$export$a16aca283550c30d({\n        usage: 'search',\n        ...options\n    });\n    // TODO(later): these methods don't currently support the ignorePunctuation option.\n    return {\n        startsWith (string, substring) {\n            if (substring.length === 0) return true;\n            // Normalize both strings so we can slice safely\n            // TODO: take into account the ignorePunctuation option as well...\n            string = string.normalize('NFC');\n            substring = substring.normalize('NFC');\n            return collator.compare(string.slice(0, substring.length), substring) === 0;\n        },\n        endsWith (string, substring) {\n            if (substring.length === 0) return true;\n            string = string.normalize('NFC');\n            substring = substring.normalize('NFC');\n            return collator.compare(string.slice(-substring.length), substring) === 0;\n        },\n        contains (string, substring) {\n            if (substring.length === 0) return true;\n            string = string.normalize('NFC');\n            substring = substring.normalize('NFC');\n            let scan = 0;\n            let sliceLen = substring.length;\n            for(; scan + sliceLen <= string.length; scan++){\n                let slice = string.slice(scan, scan + sliceLen);\n                if (collator.compare(substring, slice) === 0) return true;\n            }\n            return false;\n        }\n    };\n}\n\n\n\n\nexport {$18f2051aff69b9bf$export$a54013f0d02a8f82 as I18nProvider, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7 as useLocale, $fca6afa0e843324b$export$f12b703ca79dfbb1 as useLocalizedStringFormatter, $896ba0a80a8f4d36$export$85fd5fdf27bacc79 as useDateFormatter, $a916eb452884faea$export$b7a616150fdb9f44 as useNumberFormatter, $325a3faab7a68acd$export$a16aca283550c30d as useCollator, $bb77f239b46e8c72$export$3274cf84b703fff as useFilter};\n//# sourceMappingURL=real-module.js.map\n"],"names":["$iFADg$useIsSSR","$iFADg$useState","$iFADg$useEffect","$iFADg$react","$iFADg$useContext","$iFADg$LocalizedStringDictionary","$iFADg$useMemo","$iFADg$LocalizedStringFormatter","$iFADg$NumberFormatter"],"mappings":"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"}