{"version":3,"file":"Popover.stories.d065b699.js","sources":["../../src/popover/PopoverOverlay.tsx","../../src/popover/Popover.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FocusScope } from '@react-aria/focus';\nimport { DismissButton, useOverlay } from '@react-aria/overlays';\nimport { Box } from '../layout';\nimport { motion } from 'framer-motion';\nimport clsx from 'clsx';\n\nimport styles from './PopoverOverlay.module.scss';\n\nexport interface PopoverOverlayProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  isOpen: boolean;\n  onClose: () => void;\n  style?: React.CSSProperties;\n  className?: string;\n  children: React.ReactNode;\n}\n\nconst AnimatedBox = motion(Box);\n\nexport const PopoverOverlay = React.forwardRef(\n  (\n    {\n      children,\n      isOpen,\n      onClose,\n      className,\n      style,\n      ...divProps\n    }: PopoverOverlayProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const { overlayProps } = useOverlay(\n      {\n        onClose,\n        isOpen,\n        isDismissable: true,\n      },\n      ref as React.RefObject<HTMLDivElement>\n    );\n\n    return (\n      <FocusScope restoreFocus>\n        <AnimatedBox\n          role={'presentation'}\n          {...(overlayProps as any)}\n          {...divProps}\n          className={clsx(styles.root, className)}\n          style={style}\n          ref={ref}\n          initial={'closed'}\n          animate={isOpen ? 'open' : 'closed'}\n          variants={{\n            open: { opacity: 1, height: 'auto', y: 0 },\n            closed: { opacity: 0, height: 0, y: -50 },\n          }}\n        >\n          {children}\n          <DismissButton onDismiss={onClose} />\n        </AnimatedBox>\n      </FocusScope>\n    );\n  }\n);\nPopoverOverlay.displayName = 'PopoverOverlay';\n","import * as React from 'react';\nimport { useOverlayTrigger } from '@react-aria/overlays';\nimport { useOverlayTriggerState } from '@react-stately/overlays';\nimport { useButton } from '@react-aria/button';\nimport { Button, ButtonProps } from '../button';\nimport { PopoverOverlay } from './PopoverOverlay';\nimport { usePopper } from 'react-popper';\n\nexport interface PopoverProps extends React.HTMLAttributes<HTMLDivElement> {\n  buttonProps?: ButtonProps;\n  style?: React.CSSProperties;\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport const Popover = ({\n  buttonProps,\n  style,\n  children,\n  ...divProps\n}: PopoverProps) => {\n  const state = useOverlayTriggerState({});\n\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const overlayRef = React.useRef<HTMLDivElement>(null);\n\n  const { styles: popperStyles, attributes: popperAttributes } = usePopper(\n    triggerRef.current,\n    overlayRef.current,\n    { placement: 'auto', strategy: 'fixed' }\n  );\n\n  const { triggerProps, overlayProps } = useOverlayTrigger(\n    { type: 'dialog' },\n    state,\n    triggerRef\n  );\n\n  const { buttonProps: buttonAttributes } = useButton(\n    {\n      onPress: () => state.open(),\n    },\n    triggerRef\n  );\n\n  const triggerElement = React.useMemo(\n    () =>\n      React.createElement(Button, {\n        ...triggerProps,\n        ...buttonAttributes,\n        ...buttonProps,\n        ref: triggerRef,\n      }),\n    [buttonAttributes, buttonProps, triggerProps]\n  );\n\n  return (\n    <>\n      {triggerElement}\n      {state.isOpen && (\n        <PopoverOverlay\n          {...overlayProps}\n          {...popperAttributes.popper}\n          {...divProps}\n          style={{ ...popperStyles.popper, ...style }}\n          ref={overlayRef}\n          isOpen={state.isOpen}\n          onClose={state.close}\n        >\n          {children}\n        </PopoverOverlay>\n      )}\n    </>\n  );\n};\n"],"names":["React.forwardRef","children","isOpen","onClose","className","style","divProps","overlayProps","_jsx","FocusScope","_jsxs","DismissButton","PopoverOverlay","buttonProps","useOverlayTriggerState","React.useRef","popperStyles","popperAttributes","triggerProps","buttonAttributes","React.useMemo","React.createElement","triggerRef","_Fragment","popper","overlayRef","close"],"mappings":"yyBAkBA,KAAA,GAAA,EAAA,CAAA,EAEO,EAAAA,EAAA,QAAA,WAAA,CAAA,CAEH,WACEC,SACAC,UACAC,YACAC,WACAC,GACGC,IAAAA,CAIL,KAAA,CAAM,gBAAEC,EAAAA,CACN,UACEJ,SACAD,cAAAA,EACe,EAAA,CAAA,EAKnB,MAAAM,GAAAC,EAAA,CACE,aAAA,GAAA,SAAAC,EAAA,EAAA,CACE,KAAA,eACQ,GAAA,EACDH,GAAAA,EACDD,UAAAA,EAAAA,EAAAA,KAAAA,CAAAA,EACW,QACf,MACA,QAAA,SACS,QAAA,EAAA,OAAA,SACkB,SAAA,CACjB,KAAA,CACF,QAAA,EAAW,OAAA,OAAW,EAAA,CAAW,EAAjC,OAAA,CACE,QAAA,EAAW,OAAA,EAAW,EAAA,GAAM,CAA5B,EAFA,SAAA,CAAA,EAAAE,EAAAG,EAAA,CAMV,UAAA,CAA0BR,CAAAA,CAAAA,CAf5B,CAAA,CAAA,CAAA,CAmBL,CAAA,EAEHS,EAAAA,YAAAA,qtBCjDO,KAAA,GAAA,CAAA,CAAiB,cACtBC,QACAR,cACAJ,KACGK,CAEH,KAAA,GAAAQ,EAAA,CAAA,CAAA,EAEA,EAAAC,iBAAA,IAAA,EACA,EAAAA,iBAAA,IAAA,EAEA,CAAM,OAAA,EAAUC,WAAAA,GAA0BC,EAAAA,EAAAA,QAAAA,EAAAA,QAAAA,CAGxC,UAAA,OAAa,SAAA,OAAkB,CAAA,EAGjC,CAAM,eAAEC,gBAAcX,EAAAA,CACpB,KAAA,QAAQ,EAAA,EAAA,CAAA,EAKV,CAAM,YAAA,GAAeY,EAAAA,CACnB,QAAA,IAAA,EAAA,KAAA,CACiB,EAAA,CAAA,EAKnB,EAAAC,EAAAA,QAAAA,QAAA,IAAAC,EAAAA,QAAAA,cAAA,EAAA,CAEgC,GAAA,EACvBH,GAAAA,EACAC,GAAAA,EACAN,IAAAA,CACES,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAKX,MAAAZ,GAAAa,EAAA,CACE,SAAA,CAAA,EAAA,EAAA,QAAAf,EAAA,EAAA,CAGI,GAAA,EACMD,GAAAA,EAAAA,OACiBiB,GAAAA,EACjBlB,MAAAA,CACG,GAAA,EAAA,OAAkBkB,GAAAA,CAAWnB,EAA7B,IAAA,EACFoB,OAAAA,EAAAA,OACSvB,QAAAA,EAAAA,MACCwB,UAPjB,CAAA,CAAA,CAHJ,CAAA,CAiBH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}