{"version":3,"file":"Button.2cfaf172.js","sources":["../../src/button/BaseButton.tsx","../../src/button/Button.tsx"],"sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\n\nexport type BaseButtonProps = {\n  /**\n   * Wether the button is currently 'active' or 'selected'\n   */\n  selected?: boolean;\n\n  /**\n   * Chose from different styles\n   */\n  variant?: 'default' | 'fill' | 'borderless' | 'error';\n\n  /**\n   * Wether the button should have a width of 100%\n   */\n  fullWidth?: boolean;\n\n  /**\n   * CSS Classname\n   */\n  className?: string;\n\n  /**\n   * CSS Styles\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Content to show on the button\n   */\n  children?: any;\n} & React.HTMLProps<HTMLButtonElement>;\n\n/**\n * Primary UI shared for userAvatar interaction\n */\nexport const BaseButton = React.forwardRef<any, BaseButtonProps>(\n  (\n    {\n      children,\n      style,\n      className,\n      variant = 'default',\n      fullWidth = false,\n      selected = false,\n      ...props\n    },\n    ref\n  ) => {\n    const ComponentClass = props.href ? 'a' : ('button' as any);\n    const selectedAriaAttribute =\n      props.role && ['gridcell', 'option', 'row', 'tab'].includes(props.role)\n        ? 'aria-selected'\n        : 'aria-current';\n    return React.createElement(\n      ComponentClass,\n      {\n        ref,\n        type: props.type ?? 'button',\n        role: 'button',\n        style,\n        [selectedAriaAttribute]: selected,\n        className: clsx(\n          'lotta-base-button',\n          `variant__${variant}`,\n          { selected, 'full-width': fullWidth },\n          className\n        ),\n        ...props,\n      },\n      children\n    );\n  }\n);\nBaseButton.displayName = 'BaseButton';\n","import * as React from 'react';\nimport { BaseButton, BaseButtonProps } from './BaseButton';\nimport clsx from 'clsx';\n\nexport type ButtonProps = {\n  /**\n   * Button contents\n   */\n  label?: string;\n\n  /**\n   * Icon to show on the button side\n   */\n  icon?: React.ReactElement;\n\n  /**\n   * Disable setting a minimal height\n   */\n  small?: boolean;\n\n  /**\n   * Force style for button with only icon and without label,\n   * even if child is found\n   */\n  onlyIcon?: boolean;\n} & BaseButtonProps;\n\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ icon, label, onlyIcon, small, children, ...props }, ref) => {\n    return (\n      <BaseButton\n        {...props}\n        ref={ref}\n        className={clsx('lotta-button', props.className, {\n          'only-icon': onlyIcon || (icon && !(label || children)),\n          small: small,\n        })}\n      >\n        {icon && <span className={'lotta-button_icon'}>{icon}</span>}\n        {(label ?? children) && (\n          <span className={'lotta-button_text'}>{label ?? children}</span>\n        )}\n      </BaseButton>\n    );\n  }\n);\nButton.displayName = 'Button';\n"],"names":["React.forwardRef","children","style","className","props","React.createElement","ref","selected","fullWidth","BaseButton","icon","label","onlyIcon","small","_jsxs","_jsx","Button"],"mappings":"sIAsCO,KAAA,GAAAA,EAAA,QAAA,WAAA,CAAA,CAEH,WACEC,QACAC,YACAC,UAAAA,UACU,YAAA,GACE,WAAA,MACD,GACRC,IAAAA,OAIL,KAAA,GAAA,EAAA,KAAA,IAAA,SACA,EAAA,EAAA,MAAA,CAAA,WAAA,SAAA,MAAA,KAAA,EAAA,SAAA,EAAA,IAAA,EAAA,gBAAA,eAIA,MAAAC,GAAAA,QAAAA,cAAA,EAAA,CAEE,MACEC,KAAAA,KAAAA,OAAAA,OAAAA,SACoB,KAAA,SACd,QACNJ,CAAAA,GAAAA,EACyBK,UAAAA,EAAAA,oBAAAA,YAAAA,IAAAA,CAIvB,WAAEA,aAAAA,CAAwBC,EAAAA,CAAAA,EAHb,GAAA,CAMZJ,EAAAA,CAAAA,CAIR,CAAA,EAEHK,EAAAA,YAAAA,isCCjDO,KAAA,GAAAT,EAAA,QAAA,WAAA,CAAA,CACJ,OAAEU,QAAMC,WAAOC,QAAUC,cAAOZ,GAAaG,IAC5CU,EAAA,EAAA,CACE,GAAA,EACMV,MACJ,UAAA,EAAA,eAAA,EAAA,UAAA,CACiD,YAAA,GAAA,GAAA,CAAA,IAAA,GACFH,OAC7CY,CAAAA,EAFa,SAAA,CAAA,GAAAE,EAAA,OAAA,CAKN,UAAA,oBAAiB,SAAA,CAAsBL,CAAAA,EAAAA,WAAAA,IAAAA,EAAAA,OAAAA,CAE9C,UAAA,oBAAiB,SAAA,UAAA,CAA+BT,CAAAA,CAAAA,CAVpD,CAAA,CAcH,EAEHe,EAAAA,YAAAA;"}